{
    "version": 3,
    "sources": [
        "app/app.module.js",
        "app/services/user/user.service.js",
        "app/services/profiles/profile.service.js",
        "app/services/profiles/page-ribbon.directive.js",
        "app/services/auth/register.service.js",
        "app/services/auth/principal.service.js",
        "app/services/auth/password-reset-init.service.js",
        "app/services/auth/password-reset-finish.service.js",
        "app/services/auth/password.service.js",
        "app/services/auth/has-authority.directive.js",
        "app/services/auth/has-any-authority.directive.js",
        "app/services/auth/auth.service.js",
        "app/services/auth/auth.jwt.service.js",
        "app/services/auth/activate.service.js",
        "app/services/auth/account.service.js",
        "app/layouts/navbar/navbar.controller.js",
        "app/layouts/navbar/active-menu.directive.js",
        "app/layouts/error/error.state.js",
        "app/home/home.state.js",
        "app/home/home.controller.js",
        "app/entities/subcategory/subcategory-dialog.controller.js",
        "app/entities/subcategory/subcategory-detail.controller.js",
        "app/entities/subcategory/subcategory-delete-dialog.controller.js",
        "app/entities/subcategory/subcategory.state.js",
        "app/entities/subcategory/subcategory.service.js",
        "app/entities/subcategory/subcategory.controller.js",
        "app/entities/question/question-dialog.controller.js",
        "app/entities/question/question-detail.controller.js",
        "app/entities/question/question-delete-dialog.controller.js",
        "app/entities/question/question.state.js",
        "app/entities/question/question.service.js",
        "app/entities/question/question.controller.js",
        "app/entities/player/player-dialog.controller.js",
        "app/entities/player/player-detail.controller.js",
        "app/entities/player/player-delete-dialog.controller.js",
        "app/entities/player/player.state.js",
        "app/entities/player/player.service.js",
        "app/entities/player/player.controller.js",
        "app/entities/offer/offer-image-dialog.controller.js",
        "app/entities/offer/offer-detail.controller.js",
        "app/entities/offer/offer-delete-dialog.controller.js",
        "app/entities/offer/offer.state.js",
        "app/entities/offer/offer.service.js",
        "app/entities/offer/offer.controller.js",
        "app/entities/offer/image/ImagesCtrl.js",
        "app/entities/offer/image/angular-bootstrap-lightbox.min.js",
        "app/entities/offer/image/angular-bootstrap-lightbox.js",
        "app/entities/help/help-dialog.controller.js",
        "app/entities/help/help-detail.controller.js",
        "app/entities/help/help-delete-dialog.controller.js",
        "app/entities/help/help.state.js",
        "app/entities/help/help.service.js",
        "app/entities/help/help.controller.js",
        "app/entities/entity.state.js",
        "app/entities/category/category-dialog.controller.js",
        "app/entities/category/category-detail.controller.js",
        "app/entities/category/category-delete-dialog.controller.js",
        "app/entities/category/category.state.js",
        "app/entities/category/category.service.js",
        "app/entities/category/category.controller.js",
        "app/entities/avatar/avatar-dialog.controller.js",
        "app/entities/avatar/avatar-detail.controller.js",
        "app/entities/avatar/avatar-delete-dialog.controller.js",
        "app/entities/avatar/avatar.state.js",
        "app/entities/avatar/avatar.service.js",
        "app/entities/avatar/avatar.controller.js",
        "app/components/util/truncate-words.filter.js",
        "app/components/util/truncate-characters.filter.js",
        "app/components/util/sort-by.directive.js",
        "app/components/util/sort.directive.js",
        "app/components/util/parse-links.service.js",
        "app/components/util/pagination-util.service.js",
        "app/components/util/jhi-item-count.directive.js",
        "app/components/util/date-util.service.js",
        "app/components/util/data-util.service.js",
        "app/components/util/capitalize.filter.js",
        "app/components/util/base64.service.js",
        "app/components/login/login.service.js",
        "app/components/login/login.controller.js",
        "app/components/language/language.service.js",
        "app/components/language/language.filter.js",
        "app/components/language/language.controller.js",
        "app/components/language/language.constants.js",
        "app/components/form/show-validation.directive.js",
        "app/components/form/pagination.constants.js",
        "app/components/form/minbytes.directive.js",
        "app/components/form/maxbytes.directive.js",
        "app/components/fileread.directive.js",
        "app/components/file-required.directive.js",
        "app/components/alert/alert-error.directive.js",
        "app/components/alert/alert.service.js",
        "app/components/alert/alert.directive.js",
        "app/blocks/interceptor/notification.interceptor.js",
        "app/blocks/interceptor/errorhandler.interceptor.js",
        "app/blocks/interceptor/auth-expired.interceptor.js",
        "app/blocks/interceptor/auth.interceptor.js",
        "app/blocks/handlers/translation.handler.js",
        "app/blocks/handlers/state.handler.js",
        "app/blocks/config/uib-pagination.config.js",
        "app/blocks/config/uib-pager.config.js",
        "app/blocks/config/translation-storage.provider.js",
        "app/blocks/config/translation.config.js",
        "app/blocks/config/localstorage.config.js",
        "app/blocks/config/http.config.js",
        "app/blocks/config/compile.config.js",
        "app/blocks/config/alert.config.js",
        "app/app.state.js",
        "app/app.constants.js",
        "app/admin/user-management/user-management-dialog.controller.js",
        "app/admin/user-management/user-management-detail.controller.js",
        "app/admin/user-management/user-management-delete-dialog.controller.js",
        "app/admin/user-management/user-management.state.js",
        "app/admin/user-management/user-management.controller.js",
        "app/admin/metrics/metrics.state.js",
        "app/admin/metrics/metrics.service.js",
        "app/admin/metrics/metrics.modal.controller.js",
        "app/admin/metrics/metrics.controller.js",
        "app/admin/logs/logs.state.js",
        "app/admin/logs/logs.service.js",
        "app/admin/logs/logs.controller.js",
        "app/admin/health/health.state.js",
        "app/admin/health/health.service.js",
        "app/admin/health/health.modal.controller.js",
        "app/admin/health/health.controller.js",
        "app/admin/docs/docs.state.js",
        "app/admin/configuration/configuration.state.js",
        "app/admin/configuration/configuration.service.js",
        "app/admin/configuration/configuration.controller.js",
        "app/admin/audits/audits.state.js",
        "app/admin/audits/audits.service.js",
        "app/admin/audits/audits.controller.js",
        "app/admin/admin.state.js",
        "app/account/social/social-register.controller.js",
        "app/account/social/social-auth.controller.js",
        "app/account/social/social.state.js",
        "app/account/social/social.service.js",
        "app/account/social/directive/social.directive.js",
        "app/account/settings/settings.state.js",
        "app/account/settings/settings.controller.js",
        "app/account/reset/request/reset.request.state.js",
        "app/account/reset/request/reset.request.controller.js",
        "app/account/reset/finish/reset.finish.state.js",
        "app/account/reset/finish/reset.finish.controller.js",
        "app/account/register/register.state.js",
        "app/account/register/register.controller.js",
        "app/account/password/password-strength-bar.directive.js",
        "app/account/password/password.state.js",
        "app/account/password/password.controller.js",
        "app/account/activate/activate.state.js",
        "app/account/activate/activate.controller.js",
        "app/account/account.state.js",
        "app/app.js"
    ],
    "names": [
        "run",
        "stateHandler",
        "translationHandler",
        "initialize",
        "angular",
        "module",
        "$inject",
        "User",
        "$resource",
        "service",
        "query",
        "method",
        "isArray",
        "get",
        "transformResponse",
        "data",
        "fromJson",
        "save",
        "update",
        "delete",
        "factory",
        "ProfileService",
        "$http",
        "getProfileInfo",
        "isUndefined",
        "dataPromise",
        "then",
        "result",
        "activeProfiles",
        "response",
        "ribbonEnv",
        "inProduction",
        "indexOf",
        "swaggerEnabled",
        "pageRibbon",
        "$rootScope",
        "$translate",
        "linkFunc",
        "scope",
        "element",
        "attrs",
        "addClass",
        "removeClass",
        "directive",
        "replace",
        "restrict",
        "template",
        "link",
        "Register",
        "Principal",
        "$q",
        "Account",
        "authenticate",
        "identity",
        "_identity",
        "_authenticated",
        "hasAnyAuthority",
        "authorities",
        "i",
        "length",
        "hasAuthority",
        "authority",
        "this",
        "_id",
        "when",
        "force",
        "getAccountThen",
        "account",
        "deferred",
        "resolve",
        "getAccountCatch",
        "defer",
        "undefined",
        "isDefined",
        "promise",
        "$promise",
        "catch",
        "isAuthenticated",
        "isIdentityResolved",
        "PasswordResetInit",
        "PasswordResetFinish",
        "Password",
        "setVisible",
        "setHidden",
        "defineVisibility",
        "reset",
        "$watch",
        "split",
        "Auth",
        "$state",
        "$sessionStorage",
        "AuthServerProvider",
        "LoginService",
        "Activate",
        "activateAccount",
        "key",
        "callback",
        "cb",
        "noop",
        "err",
        "bind",
        "authorize",
        "authThen",
        "toState",
        "parent",
        "name",
        "go",
        "fromState",
        "getPreviousState",
        "previousState",
        "resetPreviousState",
        "params",
        "storePreviousState",
        "toStateParams",
        "open",
        "authReturn",
        "changePassword",
        "newPassword",
        "createAccount",
        "logout",
        "login",
        "credentials",
        "loginThen",
        "use",
        "langKey",
        "refresh",
        "reject",
        "loginWithToken",
        "jwt",
        "rememberMe",
        "resetPasswordFinish",
        "keyAndPassword",
        "resetPasswordInit",
        "mail",
        "updateAccount",
        "previousStateName",
        "previousStateParams",
        "$localStorage",
        "getToken",
        "authenticationToken",
        "authenticateSuccess",
        "status",
        "headers",
        "bearerToken",
        "slice",
        "storeAuthenticationToken",
        "username",
        "password",
        "post",
        "success",
        "interceptor",
        "NavbarController",
        "collapseNavbar",
        "toggleNavbar",
        "vm",
        "isNavbarCollapsed",
        "controller",
        "activeMenu",
        "$locale",
        "tmhDynamicLocale",
        "language",
        "selectedLanguage",
        "set",
        "stateConfig",
        "$stateProvider",
        "state",
        "url",
        "pageTitle",
        "views",
        "content@",
        "templateUrl",
        "mainTranslatePartialLoader",
        "$translatePartialLoader",
        "addPart",
        "config",
        "controllerAs",
        "HomeController",
        "$scope",
        "getAccount",
        "register",
        "$on",
        "SubcategoryDialogController",
        "$timeout",
        "$stateParams",
        "$uibModalInstance",
        "entity",
        "Subcategory",
        "Category",
        "clear",
        "dismiss",
        "isSaving",
        "subcategory",
        "id",
        "onSaveSuccess",
        "onSaveError",
        "$emit",
        "close",
        "categories",
        "focus",
        "SubcategoryDetailController",
        "unsubscribe",
        "event",
        "SubcategoryDeleteController",
        "confirmDelete",
        "page",
        "value",
        "squash",
        "sort",
        "search",
        "pagingParams",
        "PaginationUtil",
        "parsePage",
        "predicate",
        "parsePredicate",
        "ascending",
        "parseAscending",
        "translatePartialLoader",
        "currentStateData",
        "current",
        "href",
        "onEnter",
        "$uibModal",
        "backdrop",
        "size",
        "reload",
        "resourceUrl",
        "SubcategoryController",
        "ParseLinks",
        "AlertService",
        "paginationConstants",
        "loadAll",
        "reverse",
        "push",
        "onSuccess",
        "links",
        "parse",
        "totalItems",
        "queryCount",
        "subcategories",
        "onError",
        "error",
        "message",
        "itemsPerPage",
        "loadPage",
        "transition",
        "transitionTo",
        "$current",
        "currentSearch",
        "QuestionDialogController",
        "Question",
        "selectSubcat",
        "category",
        "question",
        "openCalendar",
        "date",
        "datePickerOpenStatus",
        "cat",
        "rightAnswer",
        "version",
        "QuestionDetailController",
        "QuestionDeleteController",
        "title",
        "mediaType",
        "media",
        "answer1",
        "answer2",
        "answer3",
        "answer4",
        "DateUtils",
        "convertLocalDateFromServer",
        "transformRequest",
        "copy",
        "convertLocalDateToServer",
        "toJson",
        "QuestionController",
        "questions",
        "PlayerDialogController",
        "Player",
        "Avatar",
        "player",
        "avatars",
        "PlayerDetailController",
        "PlayerDeleteController",
        "score",
        "PlayerController",
        "players",
        "OfferImageDialogController",
        "Offer",
        "imageId",
        "offer",
        "OfferDetailController",
        "OfferDeleteController",
        "OfferController",
        "offers",
        "trim",
        "text",
        "substring",
        "Lightbox",
        "openLightboxModal",
        "images",
        "index",
        "openModal",
        "requires",
        "e",
        "a",
        "put",
        "load",
        "b",
        "c",
        "d",
        "Image",
        "onload",
        "complete",
        "naturalWidth",
        "onerror",
        "src",
        "provider",
        "fullScreenMode",
        "getImageUrl",
        "getImageCaption",
        "caption",
        "calculateImageDimensionLimits",
        "windowWidth",
        "maxWidth",
        "maxHeight",
        "windowHeight",
        "calculateModalDimensions",
        "Math",
        "max",
        "imageDisplayWidth",
        "imageDisplayHeight",
        "width",
        "height",
        "isVideo",
        "type",
        "isSharedVideo",
        "match",
        "$get",
        "f",
        "has",
        "g",
        "keyboardNavEnabled",
        "image",
        "modalInstance",
        "loading",
        "setImage",
        "extend",
        "windowClass",
        "imageUrl",
        "imageCaption",
        "closeModal",
        "start",
        "firstImage",
        "prevImage",
        "nextImage",
        "lastImage",
        "setImages",
        "which",
        "target",
        "tagName",
        "toLowerCase",
        "preventDefault",
        "minWidth",
        "minHeight",
        "h",
        "j",
        "k",
        "min",
        "l",
        "round",
        "m",
        "innerWidth",
        "innerHeight",
        "imageWidth",
        "imageHeight",
        "css",
        "document",
        "querySelector",
        "lightboxSrc",
        "naturalHeight",
        "on",
        "$templateCache",
        "dimensions",
        "$document",
        "$injector",
        "ImageLoader",
        "cfpLoadingBar",
        "newImages",
        "newIndex",
        "modalParams",
        "properties",
        "$window",
        "calculateImageDisplayDimensions",
        "w",
        "minW",
        "minH",
        "maxW",
        "maxH",
        "displayW",
        "displayH",
        "ratio",
        "zoomedW",
        "zoomedH",
        "formatDimension",
        "dimension",
        "resize",
        "imageDimensionLimits",
        "imageDisplayDimensions",
        "modalDimensions",
        "failure",
        "HelpDialogController",
        "Help",
        "tempFile",
        "help",
        "file",
        "HelpDetailController",
        "HelpDeleteController",
        "description",
        "HelpController",
        "helps",
        "searchQuery",
        "abstract",
        "CategoryDialogController",
        "CategoryDetailController",
        "CategoryDeleteController",
        "CategoryController",
        "AvatarDialogController",
        "avatar",
        "AvatarDetailController",
        "AvatarDeleteController",
        "path",
        "AvatarController",
        "words",
        "wordsFilter",
        "input",
        "isNaN",
        "inputWords",
        "join",
        "filter",
        "characters",
        "charactersFilter",
        "chars",
        "breakOnWord",
        "charAt",
        "substr",
        "lastspace",
        "lastIndexOf",
        "jhSortBy",
        "parentCtrl",
        "require",
        "jhSort",
        "SortController",
        "bindToController",
        "$element",
        "applyClass",
        "thisIcon",
        "find",
        "sortIcon",
        "sortAsc",
        "sortDesc",
        "remove",
        "add",
        "resetClasses",
        "allThIcons",
        "field",
        "$apply",
        "triggerApply",
        "values",
        "$watchGroup",
        "header",
        "Error",
        "parts",
        "forEach",
        "p",
        "section",
        "queryString",
        "RegExp",
        "$0",
        "$1",
        "$2",
        "$3",
        "isString",
        "parseInt",
        "sortArray",
        "pop",
        "jhiItemCount",
        "bindings",
        "component",
        "$filter",
        "convertDateTimeFromServer",
        "Date",
        "dateString",
        "dateformat",
        "DataUtils",
        "abbreviate",
        "byteSize",
        "base64String",
        "endsWith",
        "suffix",
        "str",
        "paddingSize",
        "formatAsBytes",
        "toString",
        "openFile",
        "toBase64",
        "fileReader",
        "FileReader",
        "readAsDataURL",
        "base64Data",
        "capitalize",
        "capitalizeFilter",
        "toUpperCase",
        "Base64",
        "encode",
        "chr1",
        "chr2",
        "chr3",
        "enc1",
        "enc2",
        "enc3",
        "enc4",
        "output",
        "charCodeAt",
        "keyStr",
        "decode",
        "String",
        "fromCharCode",
        "animation",
        "resetModal",
        "LoginController",
        "cancel",
        "authenticationError",
        "$broadcast",
        "requestResetPassword",
        "JhiLanguageService",
        "LANGUAGES",
        "getAll",
        "getCurrent",
        "storage",
        "findLanguageFromKey",
        "findLanguageFromKeyFilter",
        "lang",
        "ca",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "es",
        "et",
        "fr",
        "gl",
        "hu",
        "hi",
        "it",
        "ja",
        "ko",
        "mr",
        "nl",
        "pl",
        "pt-br",
        "pt-pt",
        "ro",
        "ru",
        "sk",
        "sr",
        "sv",
        "ta",
        "tr",
        "vi",
        "zh-cn",
        "zh-tw",
        "JhiLanguageController",
        "changeLanguage",
        "languageKey",
        "languages",
        "constant",
        "showValidation",
        "formCtrl",
        "each",
        "$formGroup",
        "$inputs",
        "$input",
        "inputName",
        "attr",
        "$invalid",
        "$dirty",
        "isInvalid",
        "toggleClass",
        "minbytes",
        "ngModel",
        "$validators",
        "modelValue",
        "$isEmpty",
        "numberOfBytes",
        "maxbytes",
        "fileread",
        "attributes",
        "changeEvent",
        "reader",
        "loadEvent",
        "files",
        "$setViewValue",
        "val",
        "$render",
        "jhiAlertErrorController",
        "addErrorAlert",
        "alerts",
        "msg",
        "timeout",
        "toast",
        "isToast",
        "scoped",
        "cleanHttpErrorListener",
        "httpResponse",
        "stopPropagation",
        "Object",
        "keys",
        "errorHeader",
        "entityKey",
        "entityName",
        "instant",
        "fieldErrors",
        "fieldError",
        "convertedField",
        "fieldName",
        "objectName",
        "jhiAlertError",
        "getService",
        "$sce",
        "position",
        "warning",
        "info",
        "alertOptions",
        "alert",
        "trustAsHtml",
        "alertId",
        "closeAlert",
        "addAlert",
        "extAlerts",
        "that",
        "thisAlerts",
        "closeAlertByIndex",
        "map",
        "splice",
        "showAsToast",
        "jhiAlertController",
        "jhiAlert",
        "notificationInterceptor",
        "alertKey",
        "param",
        "errorHandlerInterceptor",
        "responseError",
        "authExpiredInterceptor",
        "authInterceptor",
        "$location",
        "request",
        "token",
        "Authorization",
        "translateChangeSuccess",
        "updateTitle",
        "titleKey",
        "VERSION",
        "stateChangeStart",
        "external",
        "stateChangeSuccess",
        "toParams",
        "fromParams",
        "paginationConfig",
        "uibPaginationConfig",
        "maxSize",
        "boundaryLinks",
        "firstText",
        "previousText",
        "nextText",
        "lastText",
        "pagerConfig",
        "uibPagerConfig",
        "translationStorageProvider",
        "$cookies",
        "$log",
        "getObject",
        "putObject",
        "translationConfig",
        "$translateProvider",
        "tmhDynamicLocaleProvider",
        "useLoader",
        "urlTemplate",
        "preferredLanguage",
        "useStorage",
        "useSanitizeValueStrategy",
        "addInterpolation",
        "localeLocationPattern",
        "useCookieStorage",
        "storageKey",
        "localStorageConfig",
        "$localStorageProvider",
        "$sessionStorageProvider",
        "setKeyPrefix",
        "httpConfig",
        "$urlRouterProvider",
        "$httpProvider",
        "httpRequestInterceptorCacheBusterProvider",
        "$urlMatcherFactoryProvider",
        "setMatchlist",
        "otherwise",
        "interceptors",
        "equals",
        "is",
        "pattern",
        "compileServiceConfig",
        "$compileProvider",
        "DEBUG_INFO_ENABLED",
        "debugInfoEnabled",
        "alertServiceConfig",
        "AlertServiceProvider",
        "navbar@",
        "UserManagementDialogController",
        "user",
        "UserManagementDetailController",
        "UserManagementDeleteController",
        "firstName",
        "lastName",
        "email",
        "activated",
        "createdBy",
        "createdDate",
        "lastModifiedBy",
        "lastModifiedDate",
        "resetDate",
        "resetKey",
        "UserManagementController",
        "setActive",
        "isActivated",
        "hiddenUsersSize",
        "users",
        "currentAccount",
        "JhiMetricsService",
        "getMetrics",
        "threadDump",
        "JhiMetricsMonitoringModalController",
        "getLabelClass",
        "threadState",
        "threadDumpAll",
        "threadDumpBlocked",
        "threadDumpRunnable",
        "threadDumpTimedWaiting",
        "threadDumpWaiting",
        "JhiMetricsMonitoringController",
        "updatingMetrics",
        "metrics",
        "refreshThreadDumpData",
        "cachesStats",
        "servicesStats",
        "newValue",
        "timers",
        "gauges",
        "newKey",
        "LogsService",
        "findAll",
        "changeLevel",
        "LogsController",
        "level",
        "loggers",
        "JhiHealthService",
        "checkHealth",
        "transformHealthData",
        "flattenHealthData",
        "getBaseName",
        "getSubSystemName",
        "remainder",
        "isHealthObject",
        "hasSubSystem",
        "addHealthObject",
        "getModuleName",
        "isLeaf",
        "healthObject",
        "healthData",
        "details",
        "hasDetails",
        "separator",
        "HealthModalController",
        "currentHealth",
        "baseName",
        "subSystemName",
        "JhiHealthCheckController",
        "statusState",
        "updatingHealth",
        "showHealth",
        "health",
        "JhiConfigurationService",
        "getConfigPropsComplete",
        "orderBy",
        "getEnv",
        "getEnvComplete",
        "vals",
        "v",
        "JhiConfigurationController",
        "allConfiguration",
        "configuration",
        "AuditsService",
        "fromDate",
        "toDate",
        "AuditsController",
        "onChangeDate",
        "dateFormat",
        "audits",
        "today",
        "getFullYear",
        "getMonth",
        "getDate",
        "previousMonth",
        "SocialRegisterController",
        "providerLabel",
        "SocialAuthController",
        "SocialService",
        "getProviderSetting",
        "getProviderURL",
        "getCSRF",
        "defaults",
        "xsrfCookieName",
        "socialService",
        "jhSocial",
        "label",
        "providerSetting",
        "providerURL",
        "csrf",
        "SettingsController",
        "saveElement",
        "withCredentials",
        "settingsAccount",
        "copyAccount",
        "RequestResetController",
        "requestReset",
        "errorEmailNotExists",
        "resetAccount",
        "ResetFinishController",
        "finishReset",
        "doNotMatch",
        "confirmPassword",
        "keyMissing",
        "RegisterController",
        "registerAccount",
        "errorUserExists",
        "errorEmailExists",
        "passwordStrengthBar",
        "iElement",
        "strength",
        "colors",
        "mesureStrength",
        "_force",
        "_regex",
        "_lowerLetters",
        "test",
        "_upperLetters",
        "_numbers",
        "_symbols",
        "_flags",
        "_passedMatches",
        "$",
        "grep",
        "getColor",
        "s",
        "idx",
        "col",
        "children",
        "background-color",
        "passwordToCheck",
        "PasswordController",
        "ActivationController"
    ],
    "mappings": "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",
    "file": "app/app-9cb5ee3123.js",
    "sourcesContent": [
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp', [\n            'ngStorage',\n            'tmh.dynamicLocale',\n            'pascalprecht.translate',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            'lr.upload',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope', '$translate'];\n\n    function pageRibbon(ProfileService, $rootScope, $translate) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" translate=\"global.ribbon.{{ribbonEnv}}\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            loginWithToken: loginWithToken,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account!== null) {\n                        $translate.use(account.langKey).then(function () {\n                            $translate.refresh();\n                        });\n                    }\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\n        }\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\n\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\n        var service = {\n            getToken: getToken,\n            login: login,\n            loginWithToken: loginWithToken,\n            storeAuthenticationToken: storeAuthenticationToken,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n        }\n\n        function login (credentials) {\n\n            var data = {\n                username: credentials.username,\n                password: credentials.password,\n                rememberMe: credentials.rememberMe\n            };\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\n\n            function authenticateSuccess (data, status, headers) {\n                var bearerToken = headers('Authorization');\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\n                    var jwt = bearerToken.slice(7, bearerToken.length);\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\n                    return jwt;\n                }\n            }\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            var deferred = $q.defer();\n\n            if (angular.isDefined(jwt)) {\n                this.storeAuthenticationToken(jwt, rememberMe);\n                deferred.resolve(jwt);\n            } else {\n                deferred.reject();\n            }\n\n            return deferred.promise;\n        }\n\n        function storeAuthenticationToken(jwt, rememberMe) {\n            if(rememberMe){\n                $localStorage.authenticationToken = jwt;\n            } else {\n                $sessionStorage.authenticationToken = jwt;\n            }\n        }\n\n        function logout () {\n            delete $localStorage.authenticationToken;\n            delete $sessionStorage.authenticationToken;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('activeMenu', activeMenu);\n\n    activeMenu.$inject = ['$translate', '$locale', 'tmhDynamicLocale'];\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                    $translatePartialLoader.addPart('home');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryDialogController', SubcategoryDialogController);\n\n    SubcategoryDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Subcategory', 'Category'];\n\n    function SubcategoryDialogController($timeout, $scope, $stateParams, $uibModalInstance, entity, Subcategory, Category) {\n        var vm = this;\n\n        vm.subcategory = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.categories = Category.query();\n\n        $timeout(function () {\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save() {\n            vm.isSaving = true;\n            if (vm.subcategory.id !== null) {\n                Subcategory.update(vm.subcategory, onSaveSuccess, onSaveError);\n            } else {\n                Subcategory.save(vm.subcategory, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess(result) {\n            $scope.$emit('quizApp:subcategoryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError() {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryDetailController', SubcategoryDetailController);\n\n    SubcategoryDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Subcategory', 'Category'];\n\n    function SubcategoryDetailController($scope, $rootScope, $stateParams, previousState, entity, Subcategory, Category) {\n        var vm = this;\n\n        vm.subcategory = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:subcategoryUpdate', function (event, result) {\n            vm.subcategory = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryDeleteController', SubcategoryDeleteController);\n\n    SubcategoryDeleteController.$inject = ['$uibModalInstance', 'entity', 'Subcategory'];\n\n    function SubcategoryDeleteController($uibModalInstance, entity, Subcategory) {\n        var vm = this;\n\n        vm.subcategory = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete(id) {\n            Subcategory.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('subcategory', {\n                parent: 'entity',\n                url: '/subcategory?page&sort&search',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.subcategory.home.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/subcategory/subcategories.html',\n                        controller: 'SubcategoryController',\n                        controllerAs: 'vm'\n                    }\n                },\n                params: {\n                    page: {\n                        value: '1',\n                        squash: true\n                    },\n                    sort: {\n                        value: 'id,asc',\n                        squash: true\n                    },\n                    search: null\n                },\n                resolve: {\n                    pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                        return {\n                            page: PaginationUtil.parsePage($stateParams.page),\n                            sort: $stateParams.sort,\n                            predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                            ascending: PaginationUtil.parseAscending($stateParams.sort),\n                            search: $stateParams.search\n                        };\n                    }],\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('subcategory');\n                        $translatePartialLoader.addPart('global');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('subcategory-detail', {\n                parent: 'entity',\n                url: '/subcategory/{id}',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.subcategory.detail.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/subcategory/subcategory-detail.html',\n                        controller: 'SubcategoryDetailController',\n                        controllerAs: 'vm'\n                    }\n                },\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('subcategory');\n                        return $translate.refresh();\n                    }],\n                    entity: ['$stateParams', 'Subcategory', function ($stateParams, Subcategory) {\n                        return Subcategory.get({id: $stateParams.id}).$promise;\n                    }],\n                    previousState: [\"$state\", function ($state) {\n                        var currentStateData = {\n                            name: $state.current.name || 'subcategory',\n                            params: $state.params,\n                            url: $state.href($state.current.name, $state.params)\n                        };\n                        return currentStateData;\n                    }]\n                }\n            })\n            .state('subcategory-detail.edit', {\n                parent: 'subcategory-detail',\n                url: '/detail/edit',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-dialog.html',\n                        controller: 'SubcategoryDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Subcategory', function (Subcategory) {\n                                return Subcategory.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('^', {}, {reload: false});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('subcategory.new', {\n                parent: 'subcategory',\n                url: '/new',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-dialog.html',\n                        controller: 'SubcategoryDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: function () {\n                                return {\n                                    name: null,\n                                    id: null\n                                };\n                            }\n                        }\n                    }).result.then(function () {\n                        $state.go('subcategory', null, {reload: 'subcategory'});\n                    }, function () {\n                        $state.go('subcategory');\n                    });\n                }]\n            })\n            .state('subcategory.edit', {\n                parent: 'subcategory',\n                url: '/{id}/edit',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-dialog.html',\n                        controller: 'SubcategoryDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Subcategory', function (Subcategory) {\n                                return Subcategory.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('subcategory', null, {reload: 'subcategory'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('subcategory.delete', {\n                parent: 'subcategory',\n                url: '/{id}/delete',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-delete-dialog.html',\n                        controller: 'SubcategoryDeleteController',\n                        controllerAs: 'vm',\n                        size: 'md',\n                        resolve: {\n                            entity: ['Subcategory', function (Subcategory) {\n                                return Subcategory.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('subcategory', null, {reload: 'subcategory'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            });\n    }\n\n})();\n",
        "(function () {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Subcategory', Subcategory);\n\n    Subcategory.$inject = ['$resource'];\n\n    function Subcategory($resource) {\n        var resourceUrl = 'api/subcategories/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': {method: 'PUT'}\n        });\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryController', SubcategoryController);\n\n    SubcategoryController.$inject = ['$scope', '$state', 'Subcategory', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function SubcategoryController($scope, $state, Subcategory, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll() {\n            Subcategory.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.subcategories = data;\n                vm.page = pagingParams.page;\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionDialogController', QuestionDialogController);\n\n    QuestionDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Question', 'Category', 'Subcategory'];\n\n    function QuestionDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Question, Category, Subcategory) {\n        var vm = this;\n        var cat = null;\n        vm.question = entity;\n        if(vm.question.rightAnswer == null) {\n            vm.question.rightAnswer = 1;\n        }\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.selectSubcat = selectSubcat;\n        vm.cat = cat;\n        vm.categories = Category.query();\n        vm.subcategories = Subcategory.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function selectSubcat(category) {\n            vm.subcategories = Category.get(category).subcategories;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.question.id !== null) {\n                Question.update(vm.question, onSaveSuccess, onSaveError);\n            } else {\n                Question.save(vm.question, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:questionUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.version = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionDetailController', QuestionDetailController);\n\n    QuestionDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Question', 'Category'];\n\n    function QuestionDetailController($scope, $rootScope, $stateParams, previousState, entity, Question, Category) {\n        var vm = this;\n\n        vm.question = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:questionUpdate', function(event, result) {\n            vm.question = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionDeleteController',QuestionDeleteController);\n\n    QuestionDeleteController.$inject = ['$uibModalInstance', 'entity', 'Question'];\n\n    function QuestionDeleteController($uibModalInstance, entity, Question) {\n        var vm = this;\n\n        vm.question = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Question.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('question', {\n            parent: 'entity',\n            url: '/question?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.question.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/question/questions.html',\n                    controller: 'QuestionController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('question');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('question-detail', {\n            parent: 'entity',\n            url: '/question/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.question.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/question/question-detail.html',\n                    controller: 'QuestionDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('question');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Question', function($stateParams, Question) {\n                    return Question.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'question',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('question-detail.edit', {\n            parent: 'question-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-dialog.html',\n                    controller: 'QuestionDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Question', function(Question) {\n                            return Question.get({id : $stateParams.id}).$promise;\n                        }],\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('question.new', {\n            parent: 'question',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-dialog.html',\n                    controller: 'QuestionDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                version: null,\n                                title: null,\n                                mediaType: null,\n                                media: null,\n                                answer1: null,\n                                answer2: null,\n                                answer3: null,\n                                answer4: null,\n                                rightAnswer: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('question', null, { reload: 'question' });\n                }, function() {\n                    $state.go('question');\n                });\n            }]\n        })\n        .state('question.edit', {\n            parent: 'question',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-dialog.html',\n                    controller: 'QuestionDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Question', function(Question) {\n                            return Question.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('question', null, { reload: 'question' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('question.delete', {\n            parent: 'question',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-delete-dialog.html',\n                    controller: 'QuestionDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Question', function(Question) {\n                            return Question.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('question', null, { reload: 'question' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n",
        "(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Question', Question);\n\n    Question.$inject = ['$resource', 'DateUtils'];\n\n    function Question ($resource, DateUtils) {\n        var resourceUrl =  'api/questions/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.version = DateUtils.convertLocalDateFromServer(data.version);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.version = DateUtils.convertLocalDateToServer(copy.version);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.version = DateUtils.convertLocalDateToServer(copy.version);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionController', QuestionController);\n\n    QuestionController.$inject = ['$scope', '$state', 'Question', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function QuestionController ($scope, $state, Question, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Question.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.questions = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerDialogController', PlayerDialogController);\n\n    PlayerDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Player', 'Avatar'];\n\n    function PlayerDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Player, Avatar) {\n        var vm = this;\n\n        vm.player = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.avatars = Avatar.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.player.id !== null) {\n                Player.update(vm.player, onSaveSuccess, onSaveError);\n            } else {\n                Player.save(vm.player, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:playerUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerDetailController', PlayerDetailController);\n\n    PlayerDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Player', 'Avatar'];\n\n    function PlayerDetailController($scope, $rootScope, $stateParams, previousState, entity, Player, Avatar) {\n        var vm = this;\n\n        vm.player = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:playerUpdate', function(event, result) {\n            vm.player = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerDeleteController',PlayerDeleteController);\n\n    PlayerDeleteController.$inject = ['$uibModalInstance', 'entity', 'Player'];\n\n    function PlayerDeleteController($uibModalInstance, entity, Player) {\n        var vm = this;\n\n        vm.player = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Player.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('player', {\n            parent: 'entity',\n            url: '/player?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.player.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/player/players.html',\n                    controller: 'PlayerController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('player');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('player-detail', {\n            parent: 'entity',\n            url: '/player/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.player.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/player/player-detail.html',\n                    controller: 'PlayerDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('player');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Player', function($stateParams, Player) {\n                    return Player.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'player',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('player-detail.edit', {\n            parent: 'player-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-dialog.html',\n                    controller: 'PlayerDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Player', function(Player) {\n                            return Player.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('player.new', {\n            parent: 'player',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-dialog.html',\n                    controller: 'PlayerDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                score: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('player', null, { reload: 'player' });\n                }, function() {\n                    $state.go('player');\n                });\n            }]\n        })\n        .state('player.edit', {\n            parent: 'player',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-dialog.html',\n                    controller: 'PlayerDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Player', function(Player) {\n                            return Player.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('player', null, { reload: 'player' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('player.delete', {\n            parent: 'player',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-delete-dialog.html',\n                    controller: 'PlayerDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Player', function(Player) {\n                            return Player.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('player', null, { reload: 'player' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n",
        "(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Player', Player);\n\n    Player.$inject = ['$resource'];\n\n    function Player ($resource) {\n        var resourceUrl =  'api/players/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerController', PlayerController);\n\n    PlayerController.$inject = ['$scope', '$state', 'Player', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function PlayerController ($scope, $state, Player, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Player.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.players = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferImageDialogController', OfferImageDialogController);\n\n    OfferImageDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Offer', 'imageId'];\n\n    function OfferImageDialogController($timeout, $scope, $stateParams, $uibModalInstance, entity, Offer, imageId) {\n        var vm = this;\n\n        vm.offer = entity;\n        vm.imageId = imageId;\n\n\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferDetailController', OfferDetailController);\n\n    OfferDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Offer'];\n\n    function OfferDetailController($scope, $rootScope, $stateParams, previousState, entity, Offer) {\n        var vm = this;\n\n        vm.offer = entity;\n        vm.previousState = previousState.name;\n\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferDeleteController', OfferDeleteController);\n\n    OfferDeleteController.$inject = ['$uibModalInstance', 'entity', 'Offer'];\n\n    function OfferDeleteController($uibModalInstance, entity, Offer) {\n        var vm = this;\n\n        vm.offer = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete(id) {\n            Offer.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('offer', {\n                parent: 'entity',\n                url: '/offer?page&sort&search',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.offer.home.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/offer/offers.html',\n                        controller: 'OfferController',\n                        controllerAs: 'vm'\n                    }\n                },\n                params: {\n                    page: {\n                        value: '1',\n                        squash: true\n                    },\n                    sort: {\n                        value: 'date,desc',\n                        squash: true\n                    },\n                    search: null\n                },\n                resolve: {\n                    pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                        return {\n                            page: PaginationUtil.parsePage($stateParams.page),\n                            sort: $stateParams.sort,\n                            predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                            ascending: PaginationUtil.parseAscending($stateParams.sort),\n                            search: $stateParams.search\n                        };\n                    }],\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('offer');\n                        $translatePartialLoader.addPart('global');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('offer-detail', {\n                parent: 'entity',\n                url: '/offer/{id}',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.offer.detail.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/offer/offer-detail.html',\n                        controller: 'OfferDetailController',\n                        controllerAs: 'vm'\n                    }\n                },\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('offer');\n                        return $translate.refresh();\n                    }],\n                    entity: ['$stateParams', 'Offer', function ($stateParams, Offer) {\n                        return Offer.get({id: $stateParams.id}).$promise;\n                    }],\n                    previousState: [\"$state\", function ($state) {\n                        var currentStateData = {\n                            name: $state.current.name || 'offer',\n                            params: $state.params,\n                            url: $state.href($state.current.name, $state.params)\n                        };\n                        return currentStateData;\n                    }]\n                }\n            })\n            .state('offer.delete', {\n                parent: 'offer',\n                url: '/{id}/delete',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/offer/offer-delete-dialog.html',\n                        controller: 'OfferDeleteController',\n                        controllerAs: 'vm',\n                        size: 'md',\n                        resolve: {\n                            entity: ['Offer', function (Offer) {\n                                return Offer.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('offer', null, {reload: 'offer'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('offer-detail.image', {\n                parent: 'offer-detail',\n                url: '/image/',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/offer/offer-image-dialog.html',\n                        controller: 'OfferImageDialogController',\n                        controllerAs: 'vm',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Offer', function (Offer) {\n                                return Offer.get({id: $stateParams.id}).$promise;\n                            }],\n                        }\n                    }).result.then(function () {\n                        $state.go('offer', null, {reload: 'offer'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            });\n    }\n\n})();\n",
        "(function () {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Offer', Offer);\n\n    Offer.$inject = ['$resource'];\n\n    function Offer($resource) {\n        var resourceUrl = 'api/offers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            }\n        });\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferController', OfferController);\n\n    OfferController.$inject = ['$scope', '$state', 'Offer', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function OfferController($scope, $state, Offer, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        $scope.trim = function (text) {\n            return text.substring(0, 100);\n        };\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll() {\n            Offer.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.offers = data;\n                vm.page = pagingParams.page;\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n",
        "angular.module('quizApp')\n    .controller('ImagesCtrl', function ($scope, Lightbox) {\n\n        $scope.openLightboxModal = function (images, index) {\n            Lightbox.openModal(images, index);\n        };\n    });\n",
        "/*! angular-bootstrap-lightbox */\nangular.module(\"bootstrapLightbox\",[\"ui.bootstrap\"]);try{angular.module(\"angular-loading-bar\"),angular.module(\"bootstrapLightbox\").requires.push(\"angular-loading-bar\")}catch(e){}try{angular.module(\"ngTouch\"),angular.module(\"bootstrapLightbox\").requires.push(\"ngTouch\")}catch(e){}try{angular.module(\"videosharing-embed\"),angular.module(\"bootstrapLightbox\").requires.push(\"videosharing-embed\")}catch(e){}angular.module(\"bootstrapLightbox\").run([\"$templateCache\",function(a){\"use strict\";a.put(\"lightbox.html\",'<div class=modal-body ng-swipe-left=Lightbox.nextImage() ng-swipe-right=Lightbox.prevImage()><div class=lightbox-nav><button class=close aria-hidden=true ng-click=$dismiss()>×</button><div class=btn-group ng-if=\"Lightbox.images.length > 1\"><a class=\"btn btn-xs btn-default\" ng-click=Lightbox.prevImage()>‹ Previous</a> <a ng-href={{Lightbox.imageUrl}} target=_blank class=\"btn btn-xs btn-default\" title=\"Open in new tab\">Open image in new tab</a> <a class=\"btn btn-xs btn-default\" ng-click=Lightbox.nextImage()>Next ›</a></div></div><div class=lightbox-image-container><div class=lightbox-image-caption><span>{{Lightbox.imageCaption}}</span></div><img ng-if=!Lightbox.isVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}}><div ng-if=Lightbox.isVideo(Lightbox.image) class=\"embed-responsive embed-responsive-16by9\"><video ng-if=!Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} controls autoplay></video><embed-video ng-if=Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} ng-href={{Lightbox.imageUrl}} iframe-id=lightbox-video class=embed-responsive-item><a ng-href={{Lightbox.imageUrl}}>Watch video</a></embed-video></div></div></div>')}]),angular.module(\"bootstrapLightbox\").service(\"ImageLoader\",[\"$q\",function(a){this.load=function(b){var c=a.defer(),d=new Image;return d.onload=function(){(\"boolean\"==typeof this.complete&&this.complete===!1||\"number\"==typeof this.naturalWidth&&0===this.naturalWidth)&&c.reject(),c.resolve(d)},d.onerror=function(){c.reject()},d.src=b,c.promise}}]),angular.module(\"bootstrapLightbox\").provider(\"Lightbox\",function(){this.templateUrl=\"lightbox.html\",this.fullScreenMode=!1,this.getImageUrl=function(a){return\"string\"==typeof a?a:a.url},this.getImageCaption=function(a){return a.caption},this.calculateImageDimensionLimits=function(a){return a.windowWidth>=768?{maxWidth:a.windowWidth-92,maxHeight:a.windowHeight-126}:{maxWidth:a.windowWidth-52,maxHeight:a.windowHeight-86}},this.calculateModalDimensions=function(a){var b=Math.max(400,a.imageDisplayWidth+32),c=Math.max(200,a.imageDisplayHeight+66);return(b>=a.windowWidth-20||a.windowWidth<768)&&(b=\"auto\"),c>=a.windowHeight&&(c=\"auto\"),{width:b,height:c}},this.isVideo=function(a){return\"object\"==typeof a&&a&&a.type?\"video\"===a.type:!1},this.isSharedVideo=function(a){return this.isVideo(a)&&!this.getImageUrl(a).match(/\\.(mp4|ogg|webm)$/)},this.$get=[\"$document\",\"$injector\",\"$uibModal\",\"$timeout\",\"ImageLoader\",function(a,b,c,d,e){var f=b.has(\"cfpLoadingBar\")?b.get(\"cfpLoadingBar\"):null,g={};return g.images=[],g.index=-1,g.templateUrl=this.templateUrl,g.fullScreenMode=this.fullScreenMode,g.getImageUrl=this.getImageUrl,g.getImageCaption=this.getImageCaption,g.calculateImageDimensionLimits=this.calculateImageDimensionLimits,g.calculateModalDimensions=this.calculateModalDimensions,g.isVideo=this.isVideo,g.isSharedVideo=this.isSharedVideo,g.keyboardNavEnabled=!1,g.image={},g.modalInstance=null,g.loading=!1,g.openModal=function(a,b,d){return g.images=a,g.setImage(b),g.modalInstance=c.open(angular.extend({templateUrl:g.templateUrl,controller:[\"$scope\",function(a){a.Lightbox=g,g.keyboardNavEnabled=!0}],windowClass:\"lightbox-modal\"},d||{})),g.modalInstance.result[\"finally\"](function(){g.images=[],g.index=1,g.image={},g.imageUrl=null,g.imageCaption=null,g.keyboardNavEnabled=!1,f&&f.complete()}),g.modalInstance},g.closeModal=function(a){return g.modalInstance.close(a)},g.setImage=function(a){if(!(a in g.images))throw\"Invalid image.\";g.loading=!0,f&&f.start();var b=g.images[a],c=g.getImageUrl(b),d=function(d){d=d||{},g.index=d.index||a,g.image=d.image||b,g.imageUrl=d.imageUrl||c,g.imageCaption=d.imageCaption||g.getImageCaption(b),g.loading=!1,f&&f.complete()};g.isVideo(b)?d():e.load(c).then(function(){d()},function(){d({imageUrl:\"#\",imageCaption:\"Failed to load image\"})})},g.firstImage=function(){g.setImage(0)},g.prevImage=function(){g.setImage((g.index-1+g.images.length)%g.images.length)},g.nextImage=function(){g.setImage((g.index+1)%g.images.length)},g.lastImage=function(){g.setImage(g.images.length-1)},g.setImages=function(a){g.images=a,g.setImage(g.index)},a.bind(\"keydown\",function(a){if(g.keyboardNavEnabled){var b=null;switch(a.which){case 39:b=\"nextImage\";break;case 37:b=\"prevImage\"}null!==b&&-1===[\"input\",\"textarea\"].indexOf(a.target.tagName.toLowerCase())&&(d(function(){g[b]()}),a.preventDefault())}}),g}]}),angular.module(\"bootstrapLightbox\").directive(\"lightboxSrc\",[\"$window\",\"ImageLoader\",\"Lightbox\",function(a,b,c){var d=function(a,b){var c=a.width,d=a.height,e=a.minWidth,f=a.minHeight,g=a.maxWidth,h=a.maxHeight,i=c,j=d;if(b){var k=Math.min(g/c,h/d),l=Math.round(c*k),m=Math.round(d*k);i=Math.max(e,l),j=Math.max(f,m)}else e>c&&f>d?c/d>g/h?(j=f,i=Math.round(c*f/d)):(i=e,j=Math.round(d*e/c)):e>c?(i=e,j=Math.round(d*e/c)):f>d&&(j=f,i=Math.round(c*f/d)),c>g&&d>h?c/d>g/h?(i=g,j=Math.round(d*g/c)):(j=h,i=Math.round(c*h/d)):c>g?(i=g,j=Math.round(d*g/c)):d>h&&(j=h,i=Math.round(c*h/d));return{width:i||0,height:j||0}},e=function(a){return\"number\"==typeof a?a+\"px\":a},f=0,g=0;return{link:function(h,i,j){var k=function(){var b=a.innerWidth,h=a.innerHeight,j=c.calculateImageDimensionLimits({windowWidth:b,windowHeight:h,imageWidth:f,imageHeight:g}),k=d(angular.extend({width:f,height:g,minWidth:1,minHeight:1,maxWidth:3e3,maxHeight:3e3},j),c.fullScreenMode),l=c.calculateModalDimensions({windowWidth:b,windowHeight:h,imageDisplayWidth:k.width,imageDisplayHeight:k.height});i.css({width:k.width+\"px\",height:k.height+\"px\"}),angular.element(document.querySelector(\".lightbox-modal .modal-dialog\")).css({width:e(l.width)}),angular.element(document.querySelector(\".lightbox-modal .modal-content\")).css({height:e(l.height)})};h.$watch(function(){return j.lightboxSrc},function(a){if(c.image)if(c.isVideo(c.image))f=1280,g=720,k(),i[0].src=a;else{i[0].src=\"#\";var d=function(){f=0,g=0,k()};a?b.load(a).then(function(b){f=b.naturalWidth,g=b.naturalHeight,k(),i[0].src=a},d):d()}}),angular.element(a).on(\"resize\",k)}}}]);",
        "/**\n * @namespace bootstrapLightbox\n */\nangular.module('bootstrapLightbox', [\n    'ui.bootstrap'\n]);\n\n// optional dependencies\ntry {\n    angular.module('angular-loading-bar');\n    angular.module('bootstrapLightbox').requires.push('angular-loading-bar');\n} catch (e) {\n}\n\n\nangular.module('bootstrapLightbox').run(['$templateCache', function ($templateCache) {\n    'use strict';\n\n    $templateCache.put('lightbox.html',\n        \"<div class=modal-body ng-swipe-left=Lightbox.nextImage() ng-swipe-right=Lightbox.prevImage()><div class=lightbox-nav><button class=close aria-hidden=true ng-click=$dismiss()>×</button><div class=btn-group ng-if=\\\"Lightbox.images.length > 1\\\"><a class=\\\"btn btn-xs btn-default\\\" ng-click=Lightbox.prevImage()>‹ Previous</a> <a ng-href={{Lightbox.imageUrl}} target=_blank class=\\\"btn btn-xs btn-default\\\" title=\\\"Open in new tab\\\">Open image in new tab</a> <a class=\\\"btn btn-xs btn-default\\\" ng-click=Lightbox.nextImage()>Next ›</a></div></div><div class=lightbox-image-container><div class=lightbox-image-caption><span>{{Lightbox.imageCaption}}</span></div><img ng-if=!Lightbox.isVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}}><div ng-if=Lightbox.isVideo(Lightbox.image) class=\\\"embed-responsive embed-responsive-16by9\\\"><video ng-if=!Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} controls autoplay></video><embed-video ng-if=Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} ng-href={{Lightbox.imageUrl}} iframe-id=lightbox-video class=embed-responsive-item><a ng-href={{Lightbox.imageUrl}}>Watch video</a></embed-video></div></div></div>\"\n    );\n\n}]);\n/**\n * @class     ImageLoader\n * @classdesc Service for loading an image.\n * @memberOf  bootstrapLightbox\n */\nangular.module('bootstrapLightbox').service('ImageLoader', ['$q',\n    function ($q) {\n        /**\n         * Load the image at the given URL.\n         * @param    {String} url\n         * @return   {Promise} A $q promise that resolves when the image has loaded\n         *   successfully.\n         * @type     {Function}\n         * @name     load\n         * @memberOf bootstrapLightbox.ImageLoader\n         */\n        this.load = function (url) {\n            var deferred = $q.defer();\n\n            var image = new Image();\n\n            // when the image has loaded\n            image.onload = function () {\n                // check image properties for possible errors\n                if ((typeof this.complete === 'boolean' && this.complete === false) ||\n                    (typeof this.naturalWidth === 'number' && this.naturalWidth === 0)) {\n                    deferred.reject();\n                }\n\n                deferred.resolve(image);\n            };\n\n            // when the image fails to load\n            image.onerror = function () {\n                deferred.reject();\n            };\n\n            // start loading the image\n            image.src = url;\n\n            return deferred.promise;\n        };\n    }]);\n/**\n * @class     Lightbox\n * @classdesc Lightbox service.\n * @memberOf  bootstrapLightbox\n */\nangular.module('bootstrapLightbox').provider('Lightbox', function () {\n    /**\n     * Template URL passed into `$uibModal.open()`.\n     * @type     {String}\n     * @name     templateUrl\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.templateUrl = 'lightbox.html';\n\n    /**\n     * Whether images should be scaled to the maximum possible dimensions.\n     * @type     {Boolean}\n     * @name     fullScreenMode\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.fullScreenMode = false;\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {String} The URL of the given image.\n     * @type     {Function}\n     * @name     getImageUrl\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.getImageUrl = function (image) {\n        return typeof image === 'string' ? image : image.url;\n    };\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {String} The caption of the given image.\n     * @type     {Function}\n     * @name     getImageCaption\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.getImageCaption = function (image) {\n        return image.caption;\n    };\n\n    /**\n     * Calculate the max and min limits to the width and height of the displayed\n     *   image (all are optional). The max dimensions override the min\n     *   dimensions if they conflict.\n     * @param    {Object} dimensions Contains the properties `windowWidth`,\n     *   `windowHeight`, `imageWidth`, and `imageHeight`.\n     * @return   {Object} May optionally contain the properties `minWidth`,\n     *   `minHeight`, `maxWidth`, and `maxHeight`.\n     * @type     {Function}\n     * @name     calculateImageDimensionLimits\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.calculateImageDimensionLimits = function (dimensions) {\n        if (dimensions.windowWidth >= 768) {\n            return {\n                // 92px = 2 * (30px margin of .modal-dialog\n                //             + 1px border of .modal-content\n                //             + 15px padding of .modal-body)\n                // with the goal of 30px side margins; however, the actual side margins\n                // will be slightly less (at 22.5px) due to the vertical scrollbar\n                'maxWidth': dimensions.windowWidth - 92,\n                // 126px = 92px as above\n                //         + 34px outer height of .lightbox-nav\n                'maxHeight': dimensions.windowHeight - 126\n            };\n        } else {\n            return {\n                // 52px = 2 * (10px margin of .modal-dialog\n                //             + 1px border of .modal-content\n                //             + 15px padding of .modal-body)\n                'maxWidth': dimensions.windowWidth - 52,\n                // 86px = 52px as above\n                //        + 34px outer height of .lightbox-nav\n                'maxHeight': dimensions.windowHeight - 86\n            };\n        }\n    };\n\n    /**\n     * Calculate the width and height of the modal. This method gets called\n     *   after the width and height of the image, as displayed inside the modal,\n     *   are calculated.\n     * @param    {Object} dimensions Contains the properties `windowWidth`,\n     *   `windowHeight`, `imageDisplayWidth`, and `imageDisplayHeight`.\n     * @return   {Object} Must contain the properties `width` and `height`.\n     * @type     {Function}\n     * @name     calculateModalDimensions\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.calculateModalDimensions = function (dimensions) {\n        // 400px = arbitrary min width\n        // 32px = 2 * (1px border of .modal-content\n        //             + 15px padding of .modal-body)\n        var width = Math.max(400, dimensions.imageDisplayWidth + 32);\n\n        // 200px = arbitrary min height\n        // 66px = 32px as above\n        //        + 34px outer height of .lightbox-nav\n        var height = Math.max(200, dimensions.imageDisplayHeight + 66);\n\n        // first case:  the modal width cannot be larger than the window width\n        //              20px = arbitrary value larger than the vertical scrollbar\n        //                     width in order to avoid having a horizontal scrollbar\n        // second case: Bootstrap modals are not centered below 768px\n        if (width >= dimensions.windowWidth - 20 || dimensions.windowWidth < 768) {\n            width = 'auto';\n        }\n\n        // the modal height cannot be larger than the window height\n        if (height >= dimensions.windowHeight) {\n            height = 'auto';\n        }\n\n        return {\n            'width': width,\n            'height': height\n        };\n    };\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {Boolean} Whether the provided element is a video.\n     * @type     {Function}\n     * @name     isVideo\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.isVideo = function (image) {\n        if (typeof image === 'object' && image && image.type) {\n            return image.type === 'video';\n        }\n\n        return false;\n    };\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {Boolean} Whether the provided element is a video that is to be\n     *   embedded with an external service like YouTube. By default, this is\n     *   determined by the url not ending in `.mp4`, `.ogg`, or `.webm`.\n     * @type     {Function}\n     * @name     isSharedVideo\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.isSharedVideo = function (image) {\n        return this.isVideo(image) && !this.getImageUrl(image).match(/\\.(mp4|ogg|webm)$/);\n    };\n\n    this.$get = ['$document', '$injector', '$uibModal', '$timeout', 'ImageLoader',\n        function ($document, $injector, $uibModal, $timeout, ImageLoader) {\n            // optional dependency\n            var cfpLoadingBar = $injector.has('cfpLoadingBar') ?\n                $injector.get('cfpLoadingBar') : null;\n\n            var Lightbox = {};\n\n            /**\n             * Array of all images to be shown in the lightbox (not `Image` objects).\n             * @type     {Array}\n             * @name     images\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.images = [];\n\n            /**\n             * The index in the `Lightbox.images` aray of the image that is currently\n             *   shown in the lightbox.\n             * @type     {Number}\n             * @name     index\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.index = -1;\n\n            // set the configurable properties and methods, the defaults of which are\n            // defined above\n            Lightbox.templateUrl = this.templateUrl;\n            Lightbox.fullScreenMode = this.fullScreenMode;\n            Lightbox.getImageUrl = this.getImageUrl;\n            Lightbox.getImageCaption = this.getImageCaption;\n            Lightbox.calculateImageDimensionLimits = this.calculateImageDimensionLimits;\n            Lightbox.calculateModalDimensions = this.calculateModalDimensions;\n            Lightbox.isVideo = this.isVideo;\n            Lightbox.isSharedVideo = this.isSharedVideo;\n\n            /**\n             * Whether keyboard navigation is currently enabled for navigating through\n             *   images in the lightbox.\n             * @type     {Boolean}\n             * @name     keyboardNavEnabled\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.keyboardNavEnabled = false;\n\n            /**\n             * The image currently shown in the lightbox.\n             * @type     {*}\n             * @name     image\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.image = {};\n\n            /**\n             * The UI Bootstrap modal instance. See {@link\n                *   http://angular-ui.github.io/bootstrap/#/modal}.\n             * @type     {Object}\n             * @name     modalInstance\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.modalInstance = null;\n\n            /**\n             * The URL of the current image. This is a property of the service rather\n             *   than of `Lightbox.image` because `Lightbox.image` need not be an\n             *   object, and besides it would be poor practice to alter the given\n             *   objects.\n             * @type     {String}\n             * @name     imageUrl\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n\n            /**\n             * The optional caption of the current image.\n             * @type     {String}\n             * @name     imageCaption\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n\n            /**\n             * Whether an image is currently being loaded.\n             * @type     {Boolean}\n             * @name     loading\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.loading = false;\n\n            /**\n             * Open the lightbox modal.\n             * @param    {Array}  newImages An array of images. Each image may be of\n             *   any type.\n             * @param    {Number} newIndex  The index in `newImages` to set as the\n             *   current image.\n             * @param    {Object} modalParams  Custom params for the angular UI\n             *   bootstrap modal (in $uibModal.open()).\n             * @return   {Object} The created UI Bootstrap modal instance.\n             * @type     {Function}\n             * @name     openModal\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.openModal = function (newImages, newIndex, modalParams) {\n                Lightbox.images = newImages;\n                Lightbox.setImage(newIndex);\n\n                // store the modal instance so we can close it manually if we need to\n                Lightbox.modalInstance = $uibModal.open(angular.extend({\n                    'templateUrl': Lightbox.templateUrl,\n                    'controller': ['$scope', function ($scope) {\n                        // $scope is the modal scope, a child of $rootScope\n                        $scope.Lightbox = Lightbox;\n\n                        Lightbox.keyboardNavEnabled = true;\n                    }],\n                    'windowClass': 'lightbox-modal'\n                }, modalParams || {}));\n\n                // modal close handler\n                Lightbox.modalInstance.result['finally'](function () {\n                    // prevent the lightbox from flickering from the old image when it gets\n                    // opened again\n                    Lightbox.images = [];\n                    Lightbox.index = 1;\n                    Lightbox.image = {};\n                    Lightbox.imageUrl = null;\n                    Lightbox.imageCaption = null;\n\n                    Lightbox.keyboardNavEnabled = false;\n\n                    // complete any lingering loading bar progress\n                    if (cfpLoadingBar) {\n                        cfpLoadingBar.complete();\n                    }\n                });\n\n                return Lightbox.modalInstance;\n            };\n\n            /**\n             * Close the lightbox modal.\n             * @param    {*} result This argument can be useful if the modal promise\n             *   gets handler(s) attached to it.\n             * @type     {Function}\n             * @name     closeModal\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.closeModal = function (result) {\n                return Lightbox.modalInstance.close(result);\n            };\n\n            /**\n             * This method can be used in all methods which navigate/change the\n             *   current image.\n             * @param    {Number} newIndex The index in the array of images to set as\n             *   the new current image.\n             * @type     {Function}\n             * @name     setImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.setImage = function (newIndex) {\n                if (!(newIndex in Lightbox.images)) {\n                    throw 'Invalid image.';\n                }\n\n                // update the loading flag and start the loading bar\n                Lightbox.loading = true;\n                if (cfpLoadingBar) {\n                    cfpLoadingBar.start();\n                }\n\n                var image = Lightbox.images[newIndex];\n                var imageUrl = Lightbox.getImageUrl(image);\n\n                var success = function (properties) {\n                    // update service properties for the image\n                    properties = properties || {};\n                    Lightbox.index = properties.index || newIndex;\n                    Lightbox.image = properties.image || image;\n                    Lightbox.imageUrl = properties.imageUrl || imageUrl;\n                    Lightbox.imageCaption = properties.imageCaption ||\n                        Lightbox.getImageCaption(image);\n\n                    // restore the loading flag and complete the loading bar\n                    Lightbox.loading = false;\n                    if (cfpLoadingBar) {\n                        cfpLoadingBar.complete();\n                    }\n                };\n\n                if (!Lightbox.isVideo(image)) {\n                    // load the image before setting it, so everything in the view is\n                    // updated at the same time; otherwise, the previous image remains while\n                    // the current image is loading\n                    ImageLoader.load(imageUrl).then(function () {\n                        success();\n                    }, function () {\n                        success({\n                            'imageUrl': '#', // blank image\n                            // use the caption to show the user an error\n                            'imageCaption': 'Failed to load image'\n                        });\n                    });\n                } else {\n                    success();\n                }\n            };\n\n            /**\n             * Navigate to the first image.\n             * @type     {Function}\n             * @name     firstImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.firstImage = function () {\n                Lightbox.setImage(0);\n            };\n\n            /**\n             * Navigate to the previous image.\n             * @type     {Function}\n             * @name     prevImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.prevImage = function () {\n                Lightbox.setImage((Lightbox.index - 1 + Lightbox.images.length) %\n                    Lightbox.images.length);\n            };\n\n            /**\n             * Navigate to the next image.\n             * @type     {Function}\n             * @name     nextImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.nextImage = function () {\n                Lightbox.setImage((Lightbox.index + 1) % Lightbox.images.length);\n            };\n\n            /**\n             * Navigate to the last image.\n             * @type     {Function}\n             * @name     lastImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.lastImage = function () {\n                Lightbox.setImage(Lightbox.images.length - 1);\n            };\n\n            /**\n             * Call this method to set both the array of images and the current image\n             *   (based on the current index). A use case is when the image collection\n             *   gets changed dynamically in some way while the lightbox is still\n             *   open.\n             * @param {Array} newImages The new array of images.\n             * @type     {Function}\n             * @name     setImages\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.setImages = function (newImages) {\n                Lightbox.images = newImages;\n                Lightbox.setImage(Lightbox.index);\n            };\n\n            // Bind the left and right arrow keys for image navigation. This event\n            // handler never gets unbinded. Disable this using the `keyboardNavEnabled`\n            // flag. It is automatically disabled when the target is an input and or a\n            // textarea. TODO: Move this to a directive.\n            $document.bind('keydown', function (event) {\n                if (!Lightbox.keyboardNavEnabled) {\n                    return;\n                }\n\n                // method of Lightbox to call\n                var method = null;\n\n                switch (event.which) {\n                    case 39: // right arrow key\n                        method = 'nextImage';\n                        break;\n                    case 37: // left arrow key\n                        method = 'prevImage';\n                        break;\n                }\n\n                if (method !== null && ['input', 'textarea'].indexOf(\n                        event.target.tagName.toLowerCase()) === -1) {\n                    // the view doesn't update without a manual digest\n                    $timeout(function () {\n                        Lightbox[method]();\n                    });\n\n                    event.preventDefault();\n                }\n            });\n\n            return Lightbox;\n        }];\n});\n/**\n * @class     lightboxSrc\n * @classdesc This attribute directive is used in an `<img>` element in the\n *   modal template in place of `src`. It handles resizing both the `<img>`\n *   element and its relevant parent elements within the modal.\n * @memberOf  bootstrapLightbox\n */\nangular.module('bootstrapLightbox').directive('lightboxSrc', ['$window',\n    'ImageLoader', 'Lightbox', function ($window, ImageLoader, Lightbox) {\n        // Calculate the dimensions to display the image. The max dimensions override\n        // the min dimensions if they conflict.\n        var calculateImageDisplayDimensions = function (dimensions, fullScreenMode) {\n            var w = dimensions.width;\n            var h = dimensions.height;\n            var minW = dimensions.minWidth;\n            var minH = dimensions.minHeight;\n            var maxW = dimensions.maxWidth;\n            var maxH = dimensions.maxHeight;\n\n            var displayW = w;\n            var displayH = h;\n\n            if (!fullScreenMode) {\n                // resize the image if it is too small\n                if (w < minW && h < minH) {\n                    // the image is both too thin and short, so compare the aspect ratios to\n                    // determine whether to min the width or height\n                    if (w / h > maxW / maxH) {\n                        displayH = minH;\n                        displayW = Math.round(w * minH / h);\n                    } else {\n                        displayW = minW;\n                        displayH = Math.round(h * minW / w);\n                    }\n                } else if (w < minW) {\n                    // the image is too thin\n                    displayW = minW;\n                    displayH = Math.round(h * minW / w);\n                } else if (h < minH) {\n                    // the image is too short\n                    displayH = minH;\n                    displayW = Math.round(w * minH / h);\n                }\n\n                // resize the image if it is too large\n                if (w > maxW && h > maxH) {\n                    // the image is both too tall and wide, so compare the aspect ratios\n                    // to determine whether to max the width or height\n                    if (w / h > maxW / maxH) {\n                        displayW = maxW;\n                        displayH = Math.round(h * maxW / w);\n                    } else {\n                        displayH = maxH;\n                        displayW = Math.round(w * maxH / h);\n                    }\n                } else if (w > maxW) {\n                    // the image is too wide\n                    displayW = maxW;\n                    displayH = Math.round(h * maxW / w);\n                } else if (h > maxH) {\n                    // the image is too tall\n                    displayH = maxH;\n                    displayW = Math.round(w * maxH / h);\n                }\n            } else {\n                // full screen mode\n                var ratio = Math.min(maxW / w, maxH / h);\n\n                var zoomedW = Math.round(w * ratio);\n                var zoomedH = Math.round(h * ratio);\n\n                displayW = Math.max(minW, zoomedW);\n                displayH = Math.max(minH, zoomedH);\n            }\n\n            return {\n                'width': displayW || 0,\n                'height': displayH || 0 // NaN is possible when dimensions.width is 0\n            };\n        };\n\n        // format the given dimension for passing into the `css()` method of `jqLite`\n        var formatDimension = function (dimension) {\n            return typeof dimension === 'number' ? dimension + 'px' : dimension;\n        };\n\n        // the dimensions of the image\n        var imageWidth = 0;\n        var imageHeight = 0;\n\n        return {\n            'link': function (scope, element, attrs) {\n                // resize the img element and the containing modal\n                var resize = function () {\n                    // get the window dimensions\n                    var windowWidth = $window.innerWidth;\n                    var windowHeight = $window.innerHeight;\n\n                    // calculate the max/min dimensions for the image\n                    var imageDimensionLimits = Lightbox.calculateImageDimensionLimits({\n                        'windowWidth': windowWidth,\n                        'windowHeight': windowHeight,\n                        'imageWidth': imageWidth,\n                        'imageHeight': imageHeight\n                    });\n\n                    // calculate the dimensions to display the image\n                    var imageDisplayDimensions = calculateImageDisplayDimensions(\n                        angular.extend({\n                            'width': imageWidth,\n                            'height': imageHeight,\n                            'minWidth': 1,\n                            'minHeight': 1,\n                            'maxWidth': 3000,\n                            'maxHeight': 3000,\n                        }, imageDimensionLimits),\n                        Lightbox.fullScreenMode\n                    );\n\n                    // calculate the dimensions of the modal container\n                    var modalDimensions = Lightbox.calculateModalDimensions({\n                        'windowWidth': windowWidth,\n                        'windowHeight': windowHeight,\n                        'imageDisplayWidth': imageDisplayDimensions.width,\n                        'imageDisplayHeight': imageDisplayDimensions.height\n                    });\n\n                    // resize the image\n                    element.css({\n                        'width': imageDisplayDimensions.width + 'px',\n                        'height': imageDisplayDimensions.height + 'px'\n                    });\n\n                    // setting the height on .modal-dialog does not expand the div with the\n                    // background, which is .modal-content\n                    angular.element(\n                        document.querySelector('.lightbox-modal .modal-dialog')\n                    ).css({\n                        'width': formatDimension(modalDimensions.width)\n                    });\n\n                    // .modal-content has no width specified; if we set the width on\n                    // .modal-content and not on .modal-dialog, .modal-dialog retains its\n                    // default width of 600px and that places .modal-content off center\n                    angular.element(\n                        document.querySelector('.lightbox-modal .modal-content')\n                    ).css({\n                        'height': formatDimension(modalDimensions.height)\n                    });\n                };\n\n                // load the new image and/or resize the video whenever the attr changes\n                scope.$watch(function () {\n                    return attrs.lightboxSrc;\n                }, function (src) {\n                    // do nothing if there's no image\n                    if (!Lightbox.image) {\n                        return;\n                    }\n\n                    if (!Lightbox.isVideo(Lightbox.image)) { // image\n                        // blank the image before resizing the element\n                        element[0].src = '#';\n\n                        // handle failure to load the image\n                        var failure = function () {\n                            imageWidth = 0;\n                            imageHeight = 0;\n\n                            resize();\n                        };\n\n                        if (src) {\n                            ImageLoader.load(src).then(function (image) {\n                                // these variables must be set before resize(), as they are used\n                                // in it\n                                imageWidth = image.naturalWidth;\n                                imageHeight = image.naturalHeight;\n\n                                // resize the img element and the containing modal\n                                resize();\n\n                                // show the image\n                                element[0].src = src;\n                            }, failure);\n                        } else {\n                            failure();\n                        }\n                    } else { // video\n                        // default dimensions\n                        imageWidth = 1280;\n                        imageHeight = 720;\n\n                        // resize the video element and the containing modal\n                        resize();\n\n                        // the src attribute applies to `<video>` and not `<embed-video>`\n                        element[0].src = src;\n                    }\n                });\n\n                // resize the image and modal whenever the window gets resized\n                angular.element($window).on('resize', resize);\n            }\n        };\n    }]);\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpDialogController', HelpDialogController);\n\n    HelpDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Help'];\n\n    function HelpDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Help) {\n        var vm = this;\n        var tempFile = '';\n        vm.help = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.tempFile = tempFile;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if(vm.tempFile) {\n                vm.help.file = vm.tempFile.replace(/^data:image\\/[a-z]+;base64,/, \"\");\n            }\n            if (vm.help.id !== null) {\n                Help.update(vm.help, onSaveSuccess, onSaveError);\n            } else {\n                Help.save(vm.help, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:helpUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpDetailController', HelpDetailController);\n\n    HelpDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Help'];\n\n    function HelpDetailController($scope, $rootScope, $stateParams, previousState, entity, Help) {\n        var vm = this;\n\n        vm.help = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:helpUpdate', function(event, result) {\n            vm.help = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpDeleteController',HelpDeleteController);\n\n    HelpDeleteController.$inject = ['$uibModalInstance', 'entity', 'Help'];\n\n    function HelpDeleteController($uibModalInstance, entity, Help) {\n        var vm = this;\n\n        vm.help = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Help.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('help', {\n            parent: 'entity',\n            url: '/help',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.help.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/help/helps.html',\n                    controller: 'HelpController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('help');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('help-detail', {\n            parent: 'entity',\n            url: '/help/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.help.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/help/help-detail.html',\n                    controller: 'HelpDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('help');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Help', function($stateParams, Help) {\n                    return Help.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'help',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('help-detail.edit', {\n            parent: 'help-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-dialog.html',\n                    controller: 'HelpDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Help', function(Help) {\n                            return Help.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('help.new', {\n            parent: 'help',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-dialog.html',\n                    controller: 'HelpDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                title: null,\n                                description: null,\n                                image: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('help', null, { reload: 'help' });\n                }, function() {\n                    $state.go('help');\n                });\n            }]\n        })\n        .state('help.edit', {\n            parent: 'help',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-dialog.html',\n                    controller: 'HelpDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Help', function(Help) {\n                            return Help.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('help', null, { reload: 'help' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('help.delete', {\n            parent: 'help',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-delete-dialog.html',\n                    controller: 'HelpDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Help', function(Help) {\n                            return Help.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('help', null, { reload: 'help' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n",
        "(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Help', Help);\n\n    Help.$inject = ['$resource'];\n\n    function Help ($resource) {\n        var resourceUrl =  'api/help/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpController', HelpController);\n\n    HelpController.$inject = ['$scope', '$state', 'Help'];\n\n    function HelpController ($scope, $state, Help) {\n        var vm = this;\n\n        vm.helps = [];\n\n        loadAll();\n\n        function loadAll() {\n            Help.query(function(result) {\n                vm.helps = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryDialogController', CategoryDialogController);\n\n    CategoryDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Category'];\n\n    function CategoryDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Category) {\n        var vm = this;\n\n        vm.category = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.category.id !== null) {\n                Category.update(vm.category, onSaveSuccess, onSaveError);\n            } else {\n                Category.save(vm.category, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:categoryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryDetailController', CategoryDetailController);\n\n    CategoryDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Category'];\n\n    function CategoryDetailController($scope, $rootScope, $stateParams, previousState, entity, Category) {\n        var vm = this;\n\n        vm.category = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:categoryUpdate', function(event, result) {\n            vm.category = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryDeleteController',CategoryDeleteController);\n\n    CategoryDeleteController.$inject = ['$uibModalInstance', 'entity', 'Category'];\n\n    function CategoryDeleteController($uibModalInstance, entity, Category) {\n        var vm = this;\n\n        vm.category = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Category.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n\n            .state('category', {\n            parent: 'entity',\n            url: '/category?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.category.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/category/categories.html',\n                    controller: 'CategoryController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('category');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('category-detail', {\n            parent: 'entity',\n            url: '/category/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.category.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/category/category-detail.html',\n                    controller: 'CategoryDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('category');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Category', function($stateParams, Category) {\n                    return Category.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'category',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('category-detail.edit', {\n            parent: 'category-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-dialog.html',\n                    controller: 'CategoryDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Category', function(Category) {\n                            return Category.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('category.new', {\n            parent: 'category',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-dialog.html',\n                    controller: 'CategoryDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('category', null, { reload: 'category' });\n                }, function() {\n                    $state.go('category');\n                });\n            }]\n        })\n        .state('category.edit', {\n            parent: 'category',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-dialog.html',\n                    controller: 'CategoryDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Category', function(Category) {\n                            return Category.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('category', null, { reload: 'category' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('category.delete', {\n            parent: 'category',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-delete-dialog.html',\n                    controller: 'CategoryDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Category', function(Category) {\n                            return Category.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('category', null, { reload: 'category' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n",
        "(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Category', Category);\n\n    Category.$inject = ['$resource'];\n\n    function Category ($resource) {\n        var resourceUrl =  'api/categories/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryController', CategoryController);\n\n    CategoryController.$inject = ['$scope', '$state', 'Category', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function CategoryController ($scope, $state, Category, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Category.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.categories = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarDialogController', AvatarDialogController);\n\n    AvatarDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Avatar'];\n\n    function AvatarDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Avatar) {\n        var vm = this;\n\n        vm.avatar = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.avatar.id !== null) {\n                Avatar.update(vm.avatar, onSaveSuccess, onSaveError);\n            } else {\n                Avatar.save(vm.avatar, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:avatarUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarDetailController', AvatarDetailController);\n\n    AvatarDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Avatar'];\n\n    function AvatarDetailController($scope, $rootScope, $stateParams, previousState, entity, Avatar) {\n        var vm = this;\n\n        vm.avatar = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:avatarUpdate', function(event, result) {\n            vm.avatar = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarDeleteController',AvatarDeleteController);\n\n    AvatarDeleteController.$inject = ['$uibModalInstance', 'entity', 'Avatar'];\n\n    function AvatarDeleteController($uibModalInstance, entity, Avatar) {\n        var vm = this;\n\n        vm.avatar = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Avatar.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('avatar', {\n            parent: 'entity',\n            url: '/avatar',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.avatar.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/avatar/avatars.html',\n                    controller: 'AvatarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('avatar');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('avatar-detail', {\n            parent: 'entity',\n            url: '/avatar/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.avatar.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/avatar/avatar-detail.html',\n                    controller: 'AvatarDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('avatar');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Avatar', function($stateParams, Avatar) {\n                    return Avatar.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'avatar',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('avatar-detail.edit', {\n            parent: 'avatar-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-dialog.html',\n                    controller: 'AvatarDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Avatar', function(Avatar) {\n                            return Avatar.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('avatar.new', {\n            parent: 'avatar',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-dialog.html',\n                    controller: 'AvatarDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                path: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('avatar', null, { reload: 'avatar' });\n                }, function() {\n                    $state.go('avatar');\n                });\n            }]\n        })\n        .state('avatar.edit', {\n            parent: 'avatar',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-dialog.html',\n                    controller: 'AvatarDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Avatar', function(Avatar) {\n                            return Avatar.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('avatar', null, { reload: 'avatar' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('avatar.delete', {\n            parent: 'avatar',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-delete-dialog.html',\n                    controller: 'AvatarDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Avatar', function(Avatar) {\n                            return Avatar.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('avatar', null, { reload: 'avatar' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n",
        "(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Avatar', Avatar);\n\n    Avatar.$inject = ['$resource'];\n\n    function Avatar ($resource) {\n        var resourceUrl =  'api/avatars/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarController', AvatarController);\n\n    AvatarController.$inject = ['$scope', '$state', 'Avatar'];\n\n    function AvatarController ($scope, $state, Avatar) {\n        var vm = this;\n\n        vm.avatars = [];\n\n        loadAll();\n\n        function loadAll() {\n            Avatar.query(function(result) {\n                vm.avatars = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n",
        "(function(){\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('quizApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n",
        "(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'cs': 'Český',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'et': 'Eesti',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sk': 'Slovenský',\n                'sr': 'Srpski',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'vi': 'Tiếng Việt',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'ru'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive(\"fileread\", [function () {\n            return {\n                scope: {\n                    fileread: \"=\"\n                },\n                link: function (scope, element, attributes) {\n                    element.bind(\"change\", function (changeEvent) {\n                        var reader = new FileReader();\n                        reader.onload = function (loadEvent) {\n                            scope.$apply(function () {\n                                scope.fileread = loadEvent.target.result;\n                            });\n                        };\n                        reader.readAsDataURL(changeEvent.target.files[0]);\n                    });\n                }\n            }\n        }]);\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('validFile',function(){\n        return {\n            require:'ngModel',\n            link:function(scope,el,attrs,ngModel){\n                //change event is fired when file is selected\n                el.bind('change',function(){\n                    scope.$apply(function(){\n                        ngModel.$setViewValue(el.val());\n                        ngModel.$render();\n                    });\n                });\n            }\n        }\n    });\n})();\n",
        "(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('quizApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('quizApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('quizApp.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('quizApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('quizApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            if (response.status === 401) {\n                delete $localStorage.authenticationToken;\n                delete $sessionStorage.authenticationToken;\n                var Principal = $injector.get('Principal');\n                if (Principal.isAuthenticated()) {\n                    var Auth = $injector.get('Auth');\n                    Auth.authorize(true);\n                }\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('authInterceptor', authInterceptor);\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\n\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\n        var service = {\n            request: request\n        };\n\n        return service;\n\n        function request (config) {\n            /*jshint camelcase: false */\n            config.headers = config.headers || {};\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n            if (token) {\n                config.headers.Authorization = 'Bearer ' + token;\n            }\n            return config;\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precedence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage', '$translate', 'JhiLanguageService', 'translationHandler', '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage, $translate, JhiLanguageService, translationHandler, $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to preferred language \"ru\"');\n                $cookies.putObject(name, 'ru');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('ru');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('authInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n",
        "(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('quizApp')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'userManagement.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n\n            }        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            //hide anonymous user from user management: it's a required user for Spring Security\n            var hiddenUsersSize = 0;\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data.splice(i, 1);\n                    hiddenUsersSize++;\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count') - hiddenUsersSize;\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'metrics.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('metrics');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n            vm.cachesStats = {};\n            angular.forEach(newValue.gauges, function (value, key) {\n                if (key.indexOf('jcache.statistics') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(18),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'logs.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('logs');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'health.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('health');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular.module('quizApp')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'configuration.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('configuration');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'audits.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audits');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SocialRegisterController', SocialRegisterController);\n\n    SocialRegisterController.$inject = ['$filter', '$stateParams'];\n\n    function SocialRegisterController ($filter, $stateParams) {\n        var vm = this;\n\n        vm.success = $stateParams.success;\n        vm.error = !vm.success;\n        vm.provider = $stateParams.provider;\n        vm.providerLabel = $filter('capitalize')(vm.provider);\n        vm.success = $stateParams.success;\n    }\n})();\n",
        "(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SocialAuthController', SocialAuthController);\n\n    SocialAuthController.$inject = ['$state', '$cookies', 'Auth'];\n\n    function SocialAuthController($state, $cookies, Auth) {\n        var token = $cookies.get('social-authentication');\n\n        Auth.loginWithToken(token, false).then(function () {\n            $cookies.remove('social-authentication');\n            Auth.authorize(true);\n        }, function () {\n            $state.go('social-register', {'success': 'false'});\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('social-register', {\n            parent: 'account',\n            url: '/social-register/:provider?{success:boolean}',\n            data: {\n                authorities: [],\n                pageTitle: 'social.register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/social/social-register.html',\n                    controller: 'SocialRegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('social');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('social-auth', {\n            parent: 'account',\n            url: '/social-auth',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    controller: 'SocialAuthController'\n                }\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('SocialService', SocialService);\n\n    SocialService.$inject = ['$http', '$cookies'];\n\n    function SocialService ($http, $cookies) {\n        var socialService = {\n            getProviderSetting: getProviderSetting,\n            getProviderURL: getProviderURL,\n            getCSRF: getCSRF\n        };\n\n        return socialService;\n\n        function getProviderSetting (provider) {\n            switch(provider) {\n            case 'google': return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\n            case 'facebook': return 'public_profile,email';\n            case 'twitter': return '';\n                // jhipster-needle-add-social-button\n            default: return 'Provider setting not defined';\n            }\n        }\n\n        function getProviderURL (provider) {\n            return 'signin/' + provider;\n        }\n\n        function getCSRF () {\n            return $cookies.get($http.defaults.xsrfCookieName);\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('jhSocial', jhSocial);\n\n    jhSocial.$inject = ['$translatePartialLoader', '$translate', '$filter', 'SocialService'];\n\n    function jhSocial($translatePartialLoader, $translate, $filter, SocialService) {\n        var directive = {\n            restrict: 'E',\n            scope: {\n                provider: '@ngProvider'\n            },\n            templateUrl: 'app/account/social/directive/social.html',\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods */\n\n        function linkFunc(scope) {\n            \n            $translatePartialLoader.addPart('social');\n            $translate.refresh();\n            \n            scope.label = $filter('capitalize')(scope.provider);\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\n            scope.csrf = SocialService.getCSRF();\n        }\n\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('settings');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController (Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.saveElement = saveElement;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function saveElement (files) {\n            return $http({\n                url: '/api/v1/fileUpload',\n                method: 'POST',\n                withCredentials: true,\n                data: files\n            })\n                .success(function (data) {\n                    vm.success = 'OK';\n                })\n        }\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function(current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n",
        "/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small data-translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('password');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n",
        "(function() {\n    'use strict';\n\n    angular\n        .module('quizApp', [\n            'ngStorage',\n            'tmh.dynamicLocale',\n            'pascalprecht.translate',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            'lr.upload',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope', '$translate'];\n\n    function pageRibbon(ProfileService, $rootScope, $translate) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" translate=\"global.ribbon.{{ribbonEnv}}\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            loginWithToken: loginWithToken,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account!== null) {\n                        $translate.use(account.langKey).then(function () {\n                            $translate.refresh();\n                        });\n                    }\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\n        }\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\n\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\n        var service = {\n            getToken: getToken,\n            login: login,\n            loginWithToken: loginWithToken,\n            storeAuthenticationToken: storeAuthenticationToken,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n        }\n\n        function login (credentials) {\n\n            var data = {\n                username: credentials.username,\n                password: credentials.password,\n                rememberMe: credentials.rememberMe\n            };\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\n\n            function authenticateSuccess (data, status, headers) {\n                var bearerToken = headers('Authorization');\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\n                    var jwt = bearerToken.slice(7, bearerToken.length);\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\n                    return jwt;\n                }\n            }\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            var deferred = $q.defer();\n\n            if (angular.isDefined(jwt)) {\n                this.storeAuthenticationToken(jwt, rememberMe);\n                deferred.resolve(jwt);\n            } else {\n                deferred.reject();\n            }\n\n            return deferred.promise;\n        }\n\n        function storeAuthenticationToken(jwt, rememberMe) {\n            if(rememberMe){\n                $localStorage.authenticationToken = jwt;\n            } else {\n                $sessionStorage.authenticationToken = jwt;\n            }\n        }\n\n        function logout () {\n            delete $localStorage.authenticationToken;\n            delete $sessionStorage.authenticationToken;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('activeMenu', activeMenu);\n\n    activeMenu.$inject = ['$translate', '$locale', 'tmhDynamicLocale'];\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                    $translatePartialLoader.addPart('home');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryDialogController', SubcategoryDialogController);\n\n    SubcategoryDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Subcategory', 'Category'];\n\n    function SubcategoryDialogController($timeout, $scope, $stateParams, $uibModalInstance, entity, Subcategory, Category) {\n        var vm = this;\n\n        vm.subcategory = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.categories = Category.query();\n\n        $timeout(function () {\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save() {\n            vm.isSaving = true;\n            if (vm.subcategory.id !== null) {\n                Subcategory.update(vm.subcategory, onSaveSuccess, onSaveError);\n            } else {\n                Subcategory.save(vm.subcategory, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess(result) {\n            $scope.$emit('quizApp:subcategoryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError() {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryDetailController', SubcategoryDetailController);\n\n    SubcategoryDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Subcategory', 'Category'];\n\n    function SubcategoryDetailController($scope, $rootScope, $stateParams, previousState, entity, Subcategory, Category) {\n        var vm = this;\n\n        vm.subcategory = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:subcategoryUpdate', function (event, result) {\n            vm.subcategory = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryDeleteController', SubcategoryDeleteController);\n\n    SubcategoryDeleteController.$inject = ['$uibModalInstance', 'entity', 'Subcategory'];\n\n    function SubcategoryDeleteController($uibModalInstance, entity, Subcategory) {\n        var vm = this;\n\n        vm.subcategory = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete(id) {\n            Subcategory.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('subcategory', {\n                parent: 'entity',\n                url: '/subcategory?page&sort&search',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.subcategory.home.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/subcategory/subcategories.html',\n                        controller: 'SubcategoryController',\n                        controllerAs: 'vm'\n                    }\n                },\n                params: {\n                    page: {\n                        value: '1',\n                        squash: true\n                    },\n                    sort: {\n                        value: 'id,asc',\n                        squash: true\n                    },\n                    search: null\n                },\n                resolve: {\n                    pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                        return {\n                            page: PaginationUtil.parsePage($stateParams.page),\n                            sort: $stateParams.sort,\n                            predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                            ascending: PaginationUtil.parseAscending($stateParams.sort),\n                            search: $stateParams.search\n                        };\n                    }],\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('subcategory');\n                        $translatePartialLoader.addPart('global');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('subcategory-detail', {\n                parent: 'entity',\n                url: '/subcategory/{id}',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.subcategory.detail.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/subcategory/subcategory-detail.html',\n                        controller: 'SubcategoryDetailController',\n                        controllerAs: 'vm'\n                    }\n                },\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('subcategory');\n                        return $translate.refresh();\n                    }],\n                    entity: ['$stateParams', 'Subcategory', function ($stateParams, Subcategory) {\n                        return Subcategory.get({id: $stateParams.id}).$promise;\n                    }],\n                    previousState: [\"$state\", function ($state) {\n                        var currentStateData = {\n                            name: $state.current.name || 'subcategory',\n                            params: $state.params,\n                            url: $state.href($state.current.name, $state.params)\n                        };\n                        return currentStateData;\n                    }]\n                }\n            })\n            .state('subcategory-detail.edit', {\n                parent: 'subcategory-detail',\n                url: '/detail/edit',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-dialog.html',\n                        controller: 'SubcategoryDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Subcategory', function (Subcategory) {\n                                return Subcategory.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('^', {}, {reload: false});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('subcategory.new', {\n                parent: 'subcategory',\n                url: '/new',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-dialog.html',\n                        controller: 'SubcategoryDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: function () {\n                                return {\n                                    name: null,\n                                    id: null\n                                };\n                            }\n                        }\n                    }).result.then(function () {\n                        $state.go('subcategory', null, {reload: 'subcategory'});\n                    }, function () {\n                        $state.go('subcategory');\n                    });\n                }]\n            })\n            .state('subcategory.edit', {\n                parent: 'subcategory',\n                url: '/{id}/edit',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-dialog.html',\n                        controller: 'SubcategoryDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Subcategory', function (Subcategory) {\n                                return Subcategory.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('subcategory', null, {reload: 'subcategory'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('subcategory.delete', {\n                parent: 'subcategory',\n                url: '/{id}/delete',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/subcategory/subcategory-delete-dialog.html',\n                        controller: 'SubcategoryDeleteController',\n                        controllerAs: 'vm',\n                        size: 'md',\n                        resolve: {\n                            entity: ['Subcategory', function (Subcategory) {\n                                return Subcategory.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('subcategory', null, {reload: 'subcategory'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            });\n    }\n\n})();\n\n(function () {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Subcategory', Subcategory);\n\n    Subcategory.$inject = ['$resource'];\n\n    function Subcategory($resource) {\n        var resourceUrl = 'api/subcategories/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': {method: 'PUT'}\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SubcategoryController', SubcategoryController);\n\n    SubcategoryController.$inject = ['$scope', '$state', 'Subcategory', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function SubcategoryController($scope, $state, Subcategory, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll() {\n            Subcategory.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.subcategories = data;\n                vm.page = pagingParams.page;\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionDialogController', QuestionDialogController);\n\n    QuestionDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Question', 'Category', 'Subcategory'];\n\n    function QuestionDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Question, Category, Subcategory) {\n        var vm = this;\n        var cat = null;\n        vm.question = entity;\n        if(vm.question.rightAnswer == null) {\n            vm.question.rightAnswer = 1;\n        }\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.selectSubcat = selectSubcat;\n        vm.cat = cat;\n        vm.categories = Category.query();\n        vm.subcategories = Subcategory.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function selectSubcat(category) {\n            vm.subcategories = Category.get(category).subcategories;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.question.id !== null) {\n                Question.update(vm.question, onSaveSuccess, onSaveError);\n            } else {\n                Question.save(vm.question, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:questionUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.version = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionDetailController', QuestionDetailController);\n\n    QuestionDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Question', 'Category'];\n\n    function QuestionDetailController($scope, $rootScope, $stateParams, previousState, entity, Question, Category) {\n        var vm = this;\n\n        vm.question = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:questionUpdate', function(event, result) {\n            vm.question = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionDeleteController',QuestionDeleteController);\n\n    QuestionDeleteController.$inject = ['$uibModalInstance', 'entity', 'Question'];\n\n    function QuestionDeleteController($uibModalInstance, entity, Question) {\n        var vm = this;\n\n        vm.question = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Question.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('question', {\n            parent: 'entity',\n            url: '/question?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.question.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/question/questions.html',\n                    controller: 'QuestionController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('question');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('question-detail', {\n            parent: 'entity',\n            url: '/question/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.question.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/question/question-detail.html',\n                    controller: 'QuestionDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('question');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Question', function($stateParams, Question) {\n                    return Question.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'question',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('question-detail.edit', {\n            parent: 'question-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-dialog.html',\n                    controller: 'QuestionDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Question', function(Question) {\n                            return Question.get({id : $stateParams.id}).$promise;\n                        }],\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('question.new', {\n            parent: 'question',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-dialog.html',\n                    controller: 'QuestionDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                version: null,\n                                title: null,\n                                mediaType: null,\n                                media: null,\n                                answer1: null,\n                                answer2: null,\n                                answer3: null,\n                                answer4: null,\n                                rightAnswer: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('question', null, { reload: 'question' });\n                }, function() {\n                    $state.go('question');\n                });\n            }]\n        })\n        .state('question.edit', {\n            parent: 'question',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-dialog.html',\n                    controller: 'QuestionDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Question', function(Question) {\n                            return Question.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('question', null, { reload: 'question' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('question.delete', {\n            parent: 'question',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/question/question-delete-dialog.html',\n                    controller: 'QuestionDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Question', function(Question) {\n                            return Question.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('question', null, { reload: 'question' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Question', Question);\n\n    Question.$inject = ['$resource', 'DateUtils'];\n\n    function Question ($resource, DateUtils) {\n        var resourceUrl =  'api/questions/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.version = DateUtils.convertLocalDateFromServer(data.version);\n                    }\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.version = DateUtils.convertLocalDateToServer(copy.version);\n                    return angular.toJson(copy);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    var copy = angular.copy(data);\n                    copy.version = DateUtils.convertLocalDateToServer(copy.version);\n                    return angular.toJson(copy);\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('QuestionController', QuestionController);\n\n    QuestionController.$inject = ['$scope', '$state', 'Question', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function QuestionController ($scope, $state, Question, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Question.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.questions = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerDialogController', PlayerDialogController);\n\n    PlayerDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Player', 'Avatar'];\n\n    function PlayerDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Player, Avatar) {\n        var vm = this;\n\n        vm.player = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.avatars = Avatar.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.player.id !== null) {\n                Player.update(vm.player, onSaveSuccess, onSaveError);\n            } else {\n                Player.save(vm.player, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:playerUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerDetailController', PlayerDetailController);\n\n    PlayerDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Player', 'Avatar'];\n\n    function PlayerDetailController($scope, $rootScope, $stateParams, previousState, entity, Player, Avatar) {\n        var vm = this;\n\n        vm.player = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:playerUpdate', function(event, result) {\n            vm.player = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerDeleteController',PlayerDeleteController);\n\n    PlayerDeleteController.$inject = ['$uibModalInstance', 'entity', 'Player'];\n\n    function PlayerDeleteController($uibModalInstance, entity, Player) {\n        var vm = this;\n\n        vm.player = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Player.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('player', {\n            parent: 'entity',\n            url: '/player?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.player.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/player/players.html',\n                    controller: 'PlayerController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('player');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('player-detail', {\n            parent: 'entity',\n            url: '/player/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.player.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/player/player-detail.html',\n                    controller: 'PlayerDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('player');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Player', function($stateParams, Player) {\n                    return Player.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'player',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('player-detail.edit', {\n            parent: 'player-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-dialog.html',\n                    controller: 'PlayerDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Player', function(Player) {\n                            return Player.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('player.new', {\n            parent: 'player',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-dialog.html',\n                    controller: 'PlayerDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                score: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('player', null, { reload: 'player' });\n                }, function() {\n                    $state.go('player');\n                });\n            }]\n        })\n        .state('player.edit', {\n            parent: 'player',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-dialog.html',\n                    controller: 'PlayerDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Player', function(Player) {\n                            return Player.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('player', null, { reload: 'player' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('player.delete', {\n            parent: 'player',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/player/player-delete-dialog.html',\n                    controller: 'PlayerDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Player', function(Player) {\n                            return Player.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('player', null, { reload: 'player' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Player', Player);\n\n    Player.$inject = ['$resource'];\n\n    function Player ($resource) {\n        var resourceUrl =  'api/players/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PlayerController', PlayerController);\n\n    PlayerController.$inject = ['$scope', '$state', 'Player', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function PlayerController ($scope, $state, Player, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Player.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.players = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferImageDialogController', OfferImageDialogController);\n\n    OfferImageDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Offer', 'imageId'];\n\n    function OfferImageDialogController($timeout, $scope, $stateParams, $uibModalInstance, entity, Offer, imageId) {\n        var vm = this;\n\n        vm.offer = entity;\n        vm.imageId = imageId;\n\n\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferDetailController', OfferDetailController);\n\n    OfferDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Offer'];\n\n    function OfferDetailController($scope, $rootScope, $stateParams, previousState, entity, Offer) {\n        var vm = this;\n\n        vm.offer = entity;\n        vm.previousState = previousState.name;\n\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferDeleteController', OfferDeleteController);\n\n    OfferDeleteController.$inject = ['$uibModalInstance', 'entity', 'Offer'];\n\n    function OfferDeleteController($uibModalInstance, entity, Offer) {\n        var vm = this;\n\n        vm.offer = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear() {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete(id) {\n            Offer.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('offer', {\n                parent: 'entity',\n                url: '/offer?page&sort&search',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.offer.home.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/offer/offers.html',\n                        controller: 'OfferController',\n                        controllerAs: 'vm'\n                    }\n                },\n                params: {\n                    page: {\n                        value: '1',\n                        squash: true\n                    },\n                    sort: {\n                        value: 'date,desc',\n                        squash: true\n                    },\n                    search: null\n                },\n                resolve: {\n                    pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                        return {\n                            page: PaginationUtil.parsePage($stateParams.page),\n                            sort: $stateParams.sort,\n                            predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                            ascending: PaginationUtil.parseAscending($stateParams.sort),\n                            search: $stateParams.search\n                        };\n                    }],\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('offer');\n                        $translatePartialLoader.addPart('global');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('offer-detail', {\n                parent: 'entity',\n                url: '/offer/{id}',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'quizApp.offer.detail.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/offer/offer-detail.html',\n                        controller: 'OfferDetailController',\n                        controllerAs: 'vm'\n                    }\n                },\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('offer');\n                        return $translate.refresh();\n                    }],\n                    entity: ['$stateParams', 'Offer', function ($stateParams, Offer) {\n                        return Offer.get({id: $stateParams.id}).$promise;\n                    }],\n                    previousState: [\"$state\", function ($state) {\n                        var currentStateData = {\n                            name: $state.current.name || 'offer',\n                            params: $state.params,\n                            url: $state.href($state.current.name, $state.params)\n                        };\n                        return currentStateData;\n                    }]\n                }\n            })\n            .state('offer.delete', {\n                parent: 'offer',\n                url: '/{id}/delete',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/offer/offer-delete-dialog.html',\n                        controller: 'OfferDeleteController',\n                        controllerAs: 'vm',\n                        size: 'md',\n                        resolve: {\n                            entity: ['Offer', function (Offer) {\n                                return Offer.get({id: $stateParams.id}).$promise;\n                            }]\n                        }\n                    }).result.then(function () {\n                        $state.go('offer', null, {reload: 'offer'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('offer-detail.image', {\n                parent: 'offer-detail',\n                url: '/image/',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function ($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/offer/offer-image-dialog.html',\n                        controller: 'OfferImageDialogController',\n                        controllerAs: 'vm',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Offer', function (Offer) {\n                                return Offer.get({id: $stateParams.id}).$promise;\n                            }],\n                        }\n                    }).result.then(function () {\n                        $state.go('offer', null, {reload: 'offer'});\n                    }, function () {\n                        $state.go('^');\n                    });\n                }]\n            });\n    }\n\n})();\n\n(function () {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Offer', Offer);\n\n    Offer.$inject = ['$resource'];\n\n    function Offer($resource) {\n        var resourceUrl = 'api/offers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('OfferController', OfferController);\n\n    OfferController.$inject = ['$scope', '$state', 'Offer', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function OfferController($scope, $state, Offer, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        $scope.trim = function (text) {\n            return text.substring(0, 100);\n        };\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll() {\n            Offer.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.offers = data;\n                vm.page = pagingParams.page;\n            }\n\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\nangular.module('quizApp')\n    .controller('ImagesCtrl', function ($scope, Lightbox) {\n\n        $scope.openLightboxModal = function (images, index) {\n            Lightbox.openModal(images, index);\n        };\n    });\n\n/*! angular-bootstrap-lightbox */\nangular.module(\"bootstrapLightbox\",[\"ui.bootstrap\"]);try{angular.module(\"angular-loading-bar\"),angular.module(\"bootstrapLightbox\").requires.push(\"angular-loading-bar\")}catch(e){}try{angular.module(\"ngTouch\"),angular.module(\"bootstrapLightbox\").requires.push(\"ngTouch\")}catch(e){}try{angular.module(\"videosharing-embed\"),angular.module(\"bootstrapLightbox\").requires.push(\"videosharing-embed\")}catch(e){}angular.module(\"bootstrapLightbox\").run([\"$templateCache\",function(a){\"use strict\";a.put(\"lightbox.html\",'<div class=modal-body ng-swipe-left=Lightbox.nextImage() ng-swipe-right=Lightbox.prevImage()><div class=lightbox-nav><button class=close aria-hidden=true ng-click=$dismiss()>×</button><div class=btn-group ng-if=\"Lightbox.images.length > 1\"><a class=\"btn btn-xs btn-default\" ng-click=Lightbox.prevImage()>‹ Previous</a> <a ng-href={{Lightbox.imageUrl}} target=_blank class=\"btn btn-xs btn-default\" title=\"Open in new tab\">Open image in new tab</a> <a class=\"btn btn-xs btn-default\" ng-click=Lightbox.nextImage()>Next ›</a></div></div><div class=lightbox-image-container><div class=lightbox-image-caption><span>{{Lightbox.imageCaption}}</span></div><img ng-if=!Lightbox.isVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}}><div ng-if=Lightbox.isVideo(Lightbox.image) class=\"embed-responsive embed-responsive-16by9\"><video ng-if=!Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} controls autoplay></video><embed-video ng-if=Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} ng-href={{Lightbox.imageUrl}} iframe-id=lightbox-video class=embed-responsive-item><a ng-href={{Lightbox.imageUrl}}>Watch video</a></embed-video></div></div></div>')}]),angular.module(\"bootstrapLightbox\").service(\"ImageLoader\",[\"$q\",function(a){this.load=function(b){var c=a.defer(),d=new Image;return d.onload=function(){(\"boolean\"==typeof this.complete&&this.complete===!1||\"number\"==typeof this.naturalWidth&&0===this.naturalWidth)&&c.reject(),c.resolve(d)},d.onerror=function(){c.reject()},d.src=b,c.promise}}]),angular.module(\"bootstrapLightbox\").provider(\"Lightbox\",function(){this.templateUrl=\"lightbox.html\",this.fullScreenMode=!1,this.getImageUrl=function(a){return\"string\"==typeof a?a:a.url},this.getImageCaption=function(a){return a.caption},this.calculateImageDimensionLimits=function(a){return a.windowWidth>=768?{maxWidth:a.windowWidth-92,maxHeight:a.windowHeight-126}:{maxWidth:a.windowWidth-52,maxHeight:a.windowHeight-86}},this.calculateModalDimensions=function(a){var b=Math.max(400,a.imageDisplayWidth+32),c=Math.max(200,a.imageDisplayHeight+66);return(b>=a.windowWidth-20||a.windowWidth<768)&&(b=\"auto\"),c>=a.windowHeight&&(c=\"auto\"),{width:b,height:c}},this.isVideo=function(a){return\"object\"==typeof a&&a&&a.type?\"video\"===a.type:!1},this.isSharedVideo=function(a){return this.isVideo(a)&&!this.getImageUrl(a).match(/\\.(mp4|ogg|webm)$/)},this.$get=[\"$document\",\"$injector\",\"$uibModal\",\"$timeout\",\"ImageLoader\",function(a,b,c,d,e){var f=b.has(\"cfpLoadingBar\")?b.get(\"cfpLoadingBar\"):null,g={};return g.images=[],g.index=-1,g.templateUrl=this.templateUrl,g.fullScreenMode=this.fullScreenMode,g.getImageUrl=this.getImageUrl,g.getImageCaption=this.getImageCaption,g.calculateImageDimensionLimits=this.calculateImageDimensionLimits,g.calculateModalDimensions=this.calculateModalDimensions,g.isVideo=this.isVideo,g.isSharedVideo=this.isSharedVideo,g.keyboardNavEnabled=!1,g.image={},g.modalInstance=null,g.loading=!1,g.openModal=function(a,b,d){return g.images=a,g.setImage(b),g.modalInstance=c.open(angular.extend({templateUrl:g.templateUrl,controller:[\"$scope\",function(a){a.Lightbox=g,g.keyboardNavEnabled=!0}],windowClass:\"lightbox-modal\"},d||{})),g.modalInstance.result[\"finally\"](function(){g.images=[],g.index=1,g.image={},g.imageUrl=null,g.imageCaption=null,g.keyboardNavEnabled=!1,f&&f.complete()}),g.modalInstance},g.closeModal=function(a){return g.modalInstance.close(a)},g.setImage=function(a){if(!(a in g.images))throw\"Invalid image.\";g.loading=!0,f&&f.start();var b=g.images[a],c=g.getImageUrl(b),d=function(d){d=d||{},g.index=d.index||a,g.image=d.image||b,g.imageUrl=d.imageUrl||c,g.imageCaption=d.imageCaption||g.getImageCaption(b),g.loading=!1,f&&f.complete()};g.isVideo(b)?d():e.load(c).then(function(){d()},function(){d({imageUrl:\"#\",imageCaption:\"Failed to load image\"})})},g.firstImage=function(){g.setImage(0)},g.prevImage=function(){g.setImage((g.index-1+g.images.length)%g.images.length)},g.nextImage=function(){g.setImage((g.index+1)%g.images.length)},g.lastImage=function(){g.setImage(g.images.length-1)},g.setImages=function(a){g.images=a,g.setImage(g.index)},a.bind(\"keydown\",function(a){if(g.keyboardNavEnabled){var b=null;switch(a.which){case 39:b=\"nextImage\";break;case 37:b=\"prevImage\"}null!==b&&-1===[\"input\",\"textarea\"].indexOf(a.target.tagName.toLowerCase())&&(d(function(){g[b]()}),a.preventDefault())}}),g}]}),angular.module(\"bootstrapLightbox\").directive(\"lightboxSrc\",[\"$window\",\"ImageLoader\",\"Lightbox\",function(a,b,c){var d=function(a,b){var c=a.width,d=a.height,e=a.minWidth,f=a.minHeight,g=a.maxWidth,h=a.maxHeight,i=c,j=d;if(b){var k=Math.min(g/c,h/d),l=Math.round(c*k),m=Math.round(d*k);i=Math.max(e,l),j=Math.max(f,m)}else e>c&&f>d?c/d>g/h?(j=f,i=Math.round(c*f/d)):(i=e,j=Math.round(d*e/c)):e>c?(i=e,j=Math.round(d*e/c)):f>d&&(j=f,i=Math.round(c*f/d)),c>g&&d>h?c/d>g/h?(i=g,j=Math.round(d*g/c)):(j=h,i=Math.round(c*h/d)):c>g?(i=g,j=Math.round(d*g/c)):d>h&&(j=h,i=Math.round(c*h/d));return{width:i||0,height:j||0}},e=function(a){return\"number\"==typeof a?a+\"px\":a},f=0,g=0;return{link:function(h,i,j){var k=function(){var b=a.innerWidth,h=a.innerHeight,j=c.calculateImageDimensionLimits({windowWidth:b,windowHeight:h,imageWidth:f,imageHeight:g}),k=d(angular.extend({width:f,height:g,minWidth:1,minHeight:1,maxWidth:3e3,maxHeight:3e3},j),c.fullScreenMode),l=c.calculateModalDimensions({windowWidth:b,windowHeight:h,imageDisplayWidth:k.width,imageDisplayHeight:k.height});i.css({width:k.width+\"px\",height:k.height+\"px\"}),angular.element(document.querySelector(\".lightbox-modal .modal-dialog\")).css({width:e(l.width)}),angular.element(document.querySelector(\".lightbox-modal .modal-content\")).css({height:e(l.height)})};h.$watch(function(){return j.lightboxSrc},function(a){if(c.image)if(c.isVideo(c.image))f=1280,g=720,k(),i[0].src=a;else{i[0].src=\"#\";var d=function(){f=0,g=0,k()};a?b.load(a).then(function(b){f=b.naturalWidth,g=b.naturalHeight,k(),i[0].src=a},d):d()}}),angular.element(a).on(\"resize\",k)}}}]);\n/**\n * @namespace bootstrapLightbox\n */\nangular.module('bootstrapLightbox', [\n    'ui.bootstrap'\n]);\n\n// optional dependencies\ntry {\n    angular.module('angular-loading-bar');\n    angular.module('bootstrapLightbox').requires.push('angular-loading-bar');\n} catch (e) {\n}\n\n\nangular.module('bootstrapLightbox').run(['$templateCache', function ($templateCache) {\n    'use strict';\n\n    $templateCache.put('lightbox.html',\n        \"<div class=modal-body ng-swipe-left=Lightbox.nextImage() ng-swipe-right=Lightbox.prevImage()><div class=lightbox-nav><button class=close aria-hidden=true ng-click=$dismiss()>×</button><div class=btn-group ng-if=\\\"Lightbox.images.length > 1\\\"><a class=\\\"btn btn-xs btn-default\\\" ng-click=Lightbox.prevImage()>‹ Previous</a> <a ng-href={{Lightbox.imageUrl}} target=_blank class=\\\"btn btn-xs btn-default\\\" title=\\\"Open in new tab\\\">Open image in new tab</a> <a class=\\\"btn btn-xs btn-default\\\" ng-click=Lightbox.nextImage()>Next ›</a></div></div><div class=lightbox-image-container><div class=lightbox-image-caption><span>{{Lightbox.imageCaption}}</span></div><img ng-if=!Lightbox.isVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}}><div ng-if=Lightbox.isVideo(Lightbox.image) class=\\\"embed-responsive embed-responsive-16by9\\\"><video ng-if=!Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} controls autoplay></video><embed-video ng-if=Lightbox.isSharedVideo(Lightbox.image) lightbox-src={{Lightbox.imageUrl}} ng-href={{Lightbox.imageUrl}} iframe-id=lightbox-video class=embed-responsive-item><a ng-href={{Lightbox.imageUrl}}>Watch video</a></embed-video></div></div></div>\"\n    );\n\n}]);\n/**\n * @class     ImageLoader\n * @classdesc Service for loading an image.\n * @memberOf  bootstrapLightbox\n */\nangular.module('bootstrapLightbox').service('ImageLoader', ['$q',\n    function ($q) {\n        /**\n         * Load the image at the given URL.\n         * @param    {String} url\n         * @return   {Promise} A $q promise that resolves when the image has loaded\n         *   successfully.\n         * @type     {Function}\n         * @name     load\n         * @memberOf bootstrapLightbox.ImageLoader\n         */\n        this.load = function (url) {\n            var deferred = $q.defer();\n\n            var image = new Image();\n\n            // when the image has loaded\n            image.onload = function () {\n                // check image properties for possible errors\n                if ((typeof this.complete === 'boolean' && this.complete === false) ||\n                    (typeof this.naturalWidth === 'number' && this.naturalWidth === 0)) {\n                    deferred.reject();\n                }\n\n                deferred.resolve(image);\n            };\n\n            // when the image fails to load\n            image.onerror = function () {\n                deferred.reject();\n            };\n\n            // start loading the image\n            image.src = url;\n\n            return deferred.promise;\n        };\n    }]);\n/**\n * @class     Lightbox\n * @classdesc Lightbox service.\n * @memberOf  bootstrapLightbox\n */\nangular.module('bootstrapLightbox').provider('Lightbox', function () {\n    /**\n     * Template URL passed into `$uibModal.open()`.\n     * @type     {String}\n     * @name     templateUrl\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.templateUrl = 'lightbox.html';\n\n    /**\n     * Whether images should be scaled to the maximum possible dimensions.\n     * @type     {Boolean}\n     * @name     fullScreenMode\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.fullScreenMode = false;\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {String} The URL of the given image.\n     * @type     {Function}\n     * @name     getImageUrl\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.getImageUrl = function (image) {\n        return typeof image === 'string' ? image : image.url;\n    };\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {String} The caption of the given image.\n     * @type     {Function}\n     * @name     getImageCaption\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.getImageCaption = function (image) {\n        return image.caption;\n    };\n\n    /**\n     * Calculate the max and min limits to the width and height of the displayed\n     *   image (all are optional). The max dimensions override the min\n     *   dimensions if they conflict.\n     * @param    {Object} dimensions Contains the properties `windowWidth`,\n     *   `windowHeight`, `imageWidth`, and `imageHeight`.\n     * @return   {Object} May optionally contain the properties `minWidth`,\n     *   `minHeight`, `maxWidth`, and `maxHeight`.\n     * @type     {Function}\n     * @name     calculateImageDimensionLimits\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.calculateImageDimensionLimits = function (dimensions) {\n        if (dimensions.windowWidth >= 768) {\n            return {\n                // 92px = 2 * (30px margin of .modal-dialog\n                //             + 1px border of .modal-content\n                //             + 15px padding of .modal-body)\n                // with the goal of 30px side margins; however, the actual side margins\n                // will be slightly less (at 22.5px) due to the vertical scrollbar\n                'maxWidth': dimensions.windowWidth - 92,\n                // 126px = 92px as above\n                //         + 34px outer height of .lightbox-nav\n                'maxHeight': dimensions.windowHeight - 126\n            };\n        } else {\n            return {\n                // 52px = 2 * (10px margin of .modal-dialog\n                //             + 1px border of .modal-content\n                //             + 15px padding of .modal-body)\n                'maxWidth': dimensions.windowWidth - 52,\n                // 86px = 52px as above\n                //        + 34px outer height of .lightbox-nav\n                'maxHeight': dimensions.windowHeight - 86\n            };\n        }\n    };\n\n    /**\n     * Calculate the width and height of the modal. This method gets called\n     *   after the width and height of the image, as displayed inside the modal,\n     *   are calculated.\n     * @param    {Object} dimensions Contains the properties `windowWidth`,\n     *   `windowHeight`, `imageDisplayWidth`, and `imageDisplayHeight`.\n     * @return   {Object} Must contain the properties `width` and `height`.\n     * @type     {Function}\n     * @name     calculateModalDimensions\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.calculateModalDimensions = function (dimensions) {\n        // 400px = arbitrary min width\n        // 32px = 2 * (1px border of .modal-content\n        //             + 15px padding of .modal-body)\n        var width = Math.max(400, dimensions.imageDisplayWidth + 32);\n\n        // 200px = arbitrary min height\n        // 66px = 32px as above\n        //        + 34px outer height of .lightbox-nav\n        var height = Math.max(200, dimensions.imageDisplayHeight + 66);\n\n        // first case:  the modal width cannot be larger than the window width\n        //              20px = arbitrary value larger than the vertical scrollbar\n        //                     width in order to avoid having a horizontal scrollbar\n        // second case: Bootstrap modals are not centered below 768px\n        if (width >= dimensions.windowWidth - 20 || dimensions.windowWidth < 768) {\n            width = 'auto';\n        }\n\n        // the modal height cannot be larger than the window height\n        if (height >= dimensions.windowHeight) {\n            height = 'auto';\n        }\n\n        return {\n            'width': width,\n            'height': height\n        };\n    };\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {Boolean} Whether the provided element is a video.\n     * @type     {Function}\n     * @name     isVideo\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.isVideo = function (image) {\n        if (typeof image === 'object' && image && image.type) {\n            return image.type === 'video';\n        }\n\n        return false;\n    };\n\n    /**\n     * @param    {*} image An element in the array of images.\n     * @return   {Boolean} Whether the provided element is a video that is to be\n     *   embedded with an external service like YouTube. By default, this is\n     *   determined by the url not ending in `.mp4`, `.ogg`, or `.webm`.\n     * @type     {Function}\n     * @name     isSharedVideo\n     * @memberOf bootstrapLightbox.Lightbox\n     */\n    this.isSharedVideo = function (image) {\n        return this.isVideo(image) && !this.getImageUrl(image).match(/\\.(mp4|ogg|webm)$/);\n    };\n\n    this.$get = ['$document', '$injector', '$uibModal', '$timeout', 'ImageLoader',\n        function ($document, $injector, $uibModal, $timeout, ImageLoader) {\n            // optional dependency\n            var cfpLoadingBar = $injector.has('cfpLoadingBar') ?\n                $injector.get('cfpLoadingBar') : null;\n\n            var Lightbox = {};\n\n            /**\n             * Array of all images to be shown in the lightbox (not `Image` objects).\n             * @type     {Array}\n             * @name     images\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.images = [];\n\n            /**\n             * The index in the `Lightbox.images` aray of the image that is currently\n             *   shown in the lightbox.\n             * @type     {Number}\n             * @name     index\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.index = -1;\n\n            // set the configurable properties and methods, the defaults of which are\n            // defined above\n            Lightbox.templateUrl = this.templateUrl;\n            Lightbox.fullScreenMode = this.fullScreenMode;\n            Lightbox.getImageUrl = this.getImageUrl;\n            Lightbox.getImageCaption = this.getImageCaption;\n            Lightbox.calculateImageDimensionLimits = this.calculateImageDimensionLimits;\n            Lightbox.calculateModalDimensions = this.calculateModalDimensions;\n            Lightbox.isVideo = this.isVideo;\n            Lightbox.isSharedVideo = this.isSharedVideo;\n\n            /**\n             * Whether keyboard navigation is currently enabled for navigating through\n             *   images in the lightbox.\n             * @type     {Boolean}\n             * @name     keyboardNavEnabled\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.keyboardNavEnabled = false;\n\n            /**\n             * The image currently shown in the lightbox.\n             * @type     {*}\n             * @name     image\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.image = {};\n\n            /**\n             * The UI Bootstrap modal instance. See {@link\n                *   http://angular-ui.github.io/bootstrap/#/modal}.\n             * @type     {Object}\n             * @name     modalInstance\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.modalInstance = null;\n\n            /**\n             * The URL of the current image. This is a property of the service rather\n             *   than of `Lightbox.image` because `Lightbox.image` need not be an\n             *   object, and besides it would be poor practice to alter the given\n             *   objects.\n             * @type     {String}\n             * @name     imageUrl\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n\n            /**\n             * The optional caption of the current image.\n             * @type     {String}\n             * @name     imageCaption\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n\n            /**\n             * Whether an image is currently being loaded.\n             * @type     {Boolean}\n             * @name     loading\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.loading = false;\n\n            /**\n             * Open the lightbox modal.\n             * @param    {Array}  newImages An array of images. Each image may be of\n             *   any type.\n             * @param    {Number} newIndex  The index in `newImages` to set as the\n             *   current image.\n             * @param    {Object} modalParams  Custom params for the angular UI\n             *   bootstrap modal (in $uibModal.open()).\n             * @return   {Object} The created UI Bootstrap modal instance.\n             * @type     {Function}\n             * @name     openModal\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.openModal = function (newImages, newIndex, modalParams) {\n                Lightbox.images = newImages;\n                Lightbox.setImage(newIndex);\n\n                // store the modal instance so we can close it manually if we need to\n                Lightbox.modalInstance = $uibModal.open(angular.extend({\n                    'templateUrl': Lightbox.templateUrl,\n                    'controller': ['$scope', function ($scope) {\n                        // $scope is the modal scope, a child of $rootScope\n                        $scope.Lightbox = Lightbox;\n\n                        Lightbox.keyboardNavEnabled = true;\n                    }],\n                    'windowClass': 'lightbox-modal'\n                }, modalParams || {}));\n\n                // modal close handler\n                Lightbox.modalInstance.result['finally'](function () {\n                    // prevent the lightbox from flickering from the old image when it gets\n                    // opened again\n                    Lightbox.images = [];\n                    Lightbox.index = 1;\n                    Lightbox.image = {};\n                    Lightbox.imageUrl = null;\n                    Lightbox.imageCaption = null;\n\n                    Lightbox.keyboardNavEnabled = false;\n\n                    // complete any lingering loading bar progress\n                    if (cfpLoadingBar) {\n                        cfpLoadingBar.complete();\n                    }\n                });\n\n                return Lightbox.modalInstance;\n            };\n\n            /**\n             * Close the lightbox modal.\n             * @param    {*} result This argument can be useful if the modal promise\n             *   gets handler(s) attached to it.\n             * @type     {Function}\n             * @name     closeModal\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.closeModal = function (result) {\n                return Lightbox.modalInstance.close(result);\n            };\n\n            /**\n             * This method can be used in all methods which navigate/change the\n             *   current image.\n             * @param    {Number} newIndex The index in the array of images to set as\n             *   the new current image.\n             * @type     {Function}\n             * @name     setImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.setImage = function (newIndex) {\n                if (!(newIndex in Lightbox.images)) {\n                    throw 'Invalid image.';\n                }\n\n                // update the loading flag and start the loading bar\n                Lightbox.loading = true;\n                if (cfpLoadingBar) {\n                    cfpLoadingBar.start();\n                }\n\n                var image = Lightbox.images[newIndex];\n                var imageUrl = Lightbox.getImageUrl(image);\n\n                var success = function (properties) {\n                    // update service properties for the image\n                    properties = properties || {};\n                    Lightbox.index = properties.index || newIndex;\n                    Lightbox.image = properties.image || image;\n                    Lightbox.imageUrl = properties.imageUrl || imageUrl;\n                    Lightbox.imageCaption = properties.imageCaption ||\n                        Lightbox.getImageCaption(image);\n\n                    // restore the loading flag and complete the loading bar\n                    Lightbox.loading = false;\n                    if (cfpLoadingBar) {\n                        cfpLoadingBar.complete();\n                    }\n                };\n\n                if (!Lightbox.isVideo(image)) {\n                    // load the image before setting it, so everything in the view is\n                    // updated at the same time; otherwise, the previous image remains while\n                    // the current image is loading\n                    ImageLoader.load(imageUrl).then(function () {\n                        success();\n                    }, function () {\n                        success({\n                            'imageUrl': '#', // blank image\n                            // use the caption to show the user an error\n                            'imageCaption': 'Failed to load image'\n                        });\n                    });\n                } else {\n                    success();\n                }\n            };\n\n            /**\n             * Navigate to the first image.\n             * @type     {Function}\n             * @name     firstImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.firstImage = function () {\n                Lightbox.setImage(0);\n            };\n\n            /**\n             * Navigate to the previous image.\n             * @type     {Function}\n             * @name     prevImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.prevImage = function () {\n                Lightbox.setImage((Lightbox.index - 1 + Lightbox.images.length) %\n                    Lightbox.images.length);\n            };\n\n            /**\n             * Navigate to the next image.\n             * @type     {Function}\n             * @name     nextImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.nextImage = function () {\n                Lightbox.setImage((Lightbox.index + 1) % Lightbox.images.length);\n            };\n\n            /**\n             * Navigate to the last image.\n             * @type     {Function}\n             * @name     lastImage\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.lastImage = function () {\n                Lightbox.setImage(Lightbox.images.length - 1);\n            };\n\n            /**\n             * Call this method to set both the array of images and the current image\n             *   (based on the current index). A use case is when the image collection\n             *   gets changed dynamically in some way while the lightbox is still\n             *   open.\n             * @param {Array} newImages The new array of images.\n             * @type     {Function}\n             * @name     setImages\n             * @memberOf bootstrapLightbox.Lightbox\n             */\n            Lightbox.setImages = function (newImages) {\n                Lightbox.images = newImages;\n                Lightbox.setImage(Lightbox.index);\n            };\n\n            // Bind the left and right arrow keys for image navigation. This event\n            // handler never gets unbinded. Disable this using the `keyboardNavEnabled`\n            // flag. It is automatically disabled when the target is an input and or a\n            // textarea. TODO: Move this to a directive.\n            $document.bind('keydown', function (event) {\n                if (!Lightbox.keyboardNavEnabled) {\n                    return;\n                }\n\n                // method of Lightbox to call\n                var method = null;\n\n                switch (event.which) {\n                    case 39: // right arrow key\n                        method = 'nextImage';\n                        break;\n                    case 37: // left arrow key\n                        method = 'prevImage';\n                        break;\n                }\n\n                if (method !== null && ['input', 'textarea'].indexOf(\n                        event.target.tagName.toLowerCase()) === -1) {\n                    // the view doesn't update without a manual digest\n                    $timeout(function () {\n                        Lightbox[method]();\n                    });\n\n                    event.preventDefault();\n                }\n            });\n\n            return Lightbox;\n        }];\n});\n/**\n * @class     lightboxSrc\n * @classdesc This attribute directive is used in an `<img>` element in the\n *   modal template in place of `src`. It handles resizing both the `<img>`\n *   element and its relevant parent elements within the modal.\n * @memberOf  bootstrapLightbox\n */\nangular.module('bootstrapLightbox').directive('lightboxSrc', ['$window',\n    'ImageLoader', 'Lightbox', function ($window, ImageLoader, Lightbox) {\n        // Calculate the dimensions to display the image. The max dimensions override\n        // the min dimensions if they conflict.\n        var calculateImageDisplayDimensions = function (dimensions, fullScreenMode) {\n            var w = dimensions.width;\n            var h = dimensions.height;\n            var minW = dimensions.minWidth;\n            var minH = dimensions.minHeight;\n            var maxW = dimensions.maxWidth;\n            var maxH = dimensions.maxHeight;\n\n            var displayW = w;\n            var displayH = h;\n\n            if (!fullScreenMode) {\n                // resize the image if it is too small\n                if (w < minW && h < minH) {\n                    // the image is both too thin and short, so compare the aspect ratios to\n                    // determine whether to min the width or height\n                    if (w / h > maxW / maxH) {\n                        displayH = minH;\n                        displayW = Math.round(w * minH / h);\n                    } else {\n                        displayW = minW;\n                        displayH = Math.round(h * minW / w);\n                    }\n                } else if (w < minW) {\n                    // the image is too thin\n                    displayW = minW;\n                    displayH = Math.round(h * minW / w);\n                } else if (h < minH) {\n                    // the image is too short\n                    displayH = minH;\n                    displayW = Math.round(w * minH / h);\n                }\n\n                // resize the image if it is too large\n                if (w > maxW && h > maxH) {\n                    // the image is both too tall and wide, so compare the aspect ratios\n                    // to determine whether to max the width or height\n                    if (w / h > maxW / maxH) {\n                        displayW = maxW;\n                        displayH = Math.round(h * maxW / w);\n                    } else {\n                        displayH = maxH;\n                        displayW = Math.round(w * maxH / h);\n                    }\n                } else if (w > maxW) {\n                    // the image is too wide\n                    displayW = maxW;\n                    displayH = Math.round(h * maxW / w);\n                } else if (h > maxH) {\n                    // the image is too tall\n                    displayH = maxH;\n                    displayW = Math.round(w * maxH / h);\n                }\n            } else {\n                // full screen mode\n                var ratio = Math.min(maxW / w, maxH / h);\n\n                var zoomedW = Math.round(w * ratio);\n                var zoomedH = Math.round(h * ratio);\n\n                displayW = Math.max(minW, zoomedW);\n                displayH = Math.max(minH, zoomedH);\n            }\n\n            return {\n                'width': displayW || 0,\n                'height': displayH || 0 // NaN is possible when dimensions.width is 0\n            };\n        };\n\n        // format the given dimension for passing into the `css()` method of `jqLite`\n        var formatDimension = function (dimension) {\n            return typeof dimension === 'number' ? dimension + 'px' : dimension;\n        };\n\n        // the dimensions of the image\n        var imageWidth = 0;\n        var imageHeight = 0;\n\n        return {\n            'link': function (scope, element, attrs) {\n                // resize the img element and the containing modal\n                var resize = function () {\n                    // get the window dimensions\n                    var windowWidth = $window.innerWidth;\n                    var windowHeight = $window.innerHeight;\n\n                    // calculate the max/min dimensions for the image\n                    var imageDimensionLimits = Lightbox.calculateImageDimensionLimits({\n                        'windowWidth': windowWidth,\n                        'windowHeight': windowHeight,\n                        'imageWidth': imageWidth,\n                        'imageHeight': imageHeight\n                    });\n\n                    // calculate the dimensions to display the image\n                    var imageDisplayDimensions = calculateImageDisplayDimensions(\n                        angular.extend({\n                            'width': imageWidth,\n                            'height': imageHeight,\n                            'minWidth': 1,\n                            'minHeight': 1,\n                            'maxWidth': 3000,\n                            'maxHeight': 3000,\n                        }, imageDimensionLimits),\n                        Lightbox.fullScreenMode\n                    );\n\n                    // calculate the dimensions of the modal container\n                    var modalDimensions = Lightbox.calculateModalDimensions({\n                        'windowWidth': windowWidth,\n                        'windowHeight': windowHeight,\n                        'imageDisplayWidth': imageDisplayDimensions.width,\n                        'imageDisplayHeight': imageDisplayDimensions.height\n                    });\n\n                    // resize the image\n                    element.css({\n                        'width': imageDisplayDimensions.width + 'px',\n                        'height': imageDisplayDimensions.height + 'px'\n                    });\n\n                    // setting the height on .modal-dialog does not expand the div with the\n                    // background, which is .modal-content\n                    angular.element(\n                        document.querySelector('.lightbox-modal .modal-dialog')\n                    ).css({\n                        'width': formatDimension(modalDimensions.width)\n                    });\n\n                    // .modal-content has no width specified; if we set the width on\n                    // .modal-content and not on .modal-dialog, .modal-dialog retains its\n                    // default width of 600px and that places .modal-content off center\n                    angular.element(\n                        document.querySelector('.lightbox-modal .modal-content')\n                    ).css({\n                        'height': formatDimension(modalDimensions.height)\n                    });\n                };\n\n                // load the new image and/or resize the video whenever the attr changes\n                scope.$watch(function () {\n                    return attrs.lightboxSrc;\n                }, function (src) {\n                    // do nothing if there's no image\n                    if (!Lightbox.image) {\n                        return;\n                    }\n\n                    if (!Lightbox.isVideo(Lightbox.image)) { // image\n                        // blank the image before resizing the element\n                        element[0].src = '#';\n\n                        // handle failure to load the image\n                        var failure = function () {\n                            imageWidth = 0;\n                            imageHeight = 0;\n\n                            resize();\n                        };\n\n                        if (src) {\n                            ImageLoader.load(src).then(function (image) {\n                                // these variables must be set before resize(), as they are used\n                                // in it\n                                imageWidth = image.naturalWidth;\n                                imageHeight = image.naturalHeight;\n\n                                // resize the img element and the containing modal\n                                resize();\n\n                                // show the image\n                                element[0].src = src;\n                            }, failure);\n                        } else {\n                            failure();\n                        }\n                    } else { // video\n                        // default dimensions\n                        imageWidth = 1280;\n                        imageHeight = 720;\n\n                        // resize the video element and the containing modal\n                        resize();\n\n                        // the src attribute applies to `<video>` and not `<embed-video>`\n                        element[0].src = src;\n                    }\n                });\n\n                // resize the image and modal whenever the window gets resized\n                angular.element($window).on('resize', resize);\n            }\n        };\n    }]);\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpDialogController', HelpDialogController);\n\n    HelpDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Help'];\n\n    function HelpDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Help) {\n        var vm = this;\n        var tempFile = '';\n        vm.help = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.tempFile = tempFile;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if(vm.tempFile) {\n                vm.help.file = vm.tempFile.replace(/^data:image\\/[a-z]+;base64,/, \"\");\n            }\n            if (vm.help.id !== null) {\n                Help.update(vm.help, onSaveSuccess, onSaveError);\n            } else {\n                Help.save(vm.help, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:helpUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpDetailController', HelpDetailController);\n\n    HelpDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Help'];\n\n    function HelpDetailController($scope, $rootScope, $stateParams, previousState, entity, Help) {\n        var vm = this;\n\n        vm.help = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:helpUpdate', function(event, result) {\n            vm.help = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpDeleteController',HelpDeleteController);\n\n    HelpDeleteController.$inject = ['$uibModalInstance', 'entity', 'Help'];\n\n    function HelpDeleteController($uibModalInstance, entity, Help) {\n        var vm = this;\n\n        vm.help = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Help.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('help', {\n            parent: 'entity',\n            url: '/help',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.help.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/help/helps.html',\n                    controller: 'HelpController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('help');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('help-detail', {\n            parent: 'entity',\n            url: '/help/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.help.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/help/help-detail.html',\n                    controller: 'HelpDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('help');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Help', function($stateParams, Help) {\n                    return Help.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'help',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('help-detail.edit', {\n            parent: 'help-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-dialog.html',\n                    controller: 'HelpDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Help', function(Help) {\n                            return Help.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('help.new', {\n            parent: 'help',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-dialog.html',\n                    controller: 'HelpDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                title: null,\n                                description: null,\n                                image: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('help', null, { reload: 'help' });\n                }, function() {\n                    $state.go('help');\n                });\n            }]\n        })\n        .state('help.edit', {\n            parent: 'help',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-dialog.html',\n                    controller: 'HelpDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Help', function(Help) {\n                            return Help.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('help', null, { reload: 'help' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('help.delete', {\n            parent: 'help',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/help/help-delete-dialog.html',\n                    controller: 'HelpDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Help', function(Help) {\n                            return Help.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('help', null, { reload: 'help' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Help', Help);\n\n    Help.$inject = ['$resource'];\n\n    function Help ($resource) {\n        var resourceUrl =  'api/help/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('HelpController', HelpController);\n\n    HelpController.$inject = ['$scope', '$state', 'Help'];\n\n    function HelpController ($scope, $state, Help) {\n        var vm = this;\n\n        vm.helps = [];\n\n        loadAll();\n\n        function loadAll() {\n            Help.query(function(result) {\n                vm.helps = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryDialogController', CategoryDialogController);\n\n    CategoryDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Category'];\n\n    function CategoryDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Category) {\n        var vm = this;\n\n        vm.category = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.category.id !== null) {\n                Category.update(vm.category, onSaveSuccess, onSaveError);\n            } else {\n                Category.save(vm.category, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:categoryUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryDetailController', CategoryDetailController);\n\n    CategoryDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Category'];\n\n    function CategoryDetailController($scope, $rootScope, $stateParams, previousState, entity, Category) {\n        var vm = this;\n\n        vm.category = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:categoryUpdate', function(event, result) {\n            vm.category = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryDeleteController',CategoryDeleteController);\n\n    CategoryDeleteController.$inject = ['$uibModalInstance', 'entity', 'Category'];\n\n    function CategoryDeleteController($uibModalInstance, entity, Category) {\n        var vm = this;\n\n        vm.category = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Category.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n\n            .state('category', {\n            parent: 'entity',\n            url: '/category?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.category.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/category/categories.html',\n                    controller: 'CategoryController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('category');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('category-detail', {\n            parent: 'entity',\n            url: '/category/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.category.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/category/category-detail.html',\n                    controller: 'CategoryDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('category');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Category', function($stateParams, Category) {\n                    return Category.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'category',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('category-detail.edit', {\n            parent: 'category-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-dialog.html',\n                    controller: 'CategoryDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Category', function(Category) {\n                            return Category.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('category.new', {\n            parent: 'category',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-dialog.html',\n                    controller: 'CategoryDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('category', null, { reload: 'category' });\n                }, function() {\n                    $state.go('category');\n                });\n            }]\n        })\n        .state('category.edit', {\n            parent: 'category',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-dialog.html',\n                    controller: 'CategoryDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Category', function(Category) {\n                            return Category.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('category', null, { reload: 'category' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('category.delete', {\n            parent: 'category',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/category/category-delete-dialog.html',\n                    controller: 'CategoryDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Category', function(Category) {\n                            return Category.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('category', null, { reload: 'category' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Category', Category);\n\n    Category.$inject = ['$resource'];\n\n    function Category ($resource) {\n        var resourceUrl =  'api/categories/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('CategoryController', CategoryController);\n\n    CategoryController.$inject = ['$scope', '$state', 'Category', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function CategoryController ($scope, $state, Category, ParseLinks, AlertService, paginationConstants, pagingParams) {\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Category.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.categories = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarDialogController', AvatarDialogController);\n\n    AvatarDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Avatar'];\n\n    function AvatarDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Avatar) {\n        var vm = this;\n\n        vm.avatar = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.avatar.id !== null) {\n                Avatar.update(vm.avatar, onSaveSuccess, onSaveError);\n            } else {\n                Avatar.save(vm.avatar, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('quizApp:avatarUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarDetailController', AvatarDetailController);\n\n    AvatarDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Avatar'];\n\n    function AvatarDetailController($scope, $rootScope, $stateParams, previousState, entity, Avatar) {\n        var vm = this;\n\n        vm.avatar = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('quizApp:avatarUpdate', function(event, result) {\n            vm.avatar = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarDeleteController',AvatarDeleteController);\n\n    AvatarDeleteController.$inject = ['$uibModalInstance', 'entity', 'Avatar'];\n\n    function AvatarDeleteController($uibModalInstance, entity, Avatar) {\n        var vm = this;\n\n        vm.avatar = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Avatar.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('avatar', {\n            parent: 'entity',\n            url: '/avatar',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.avatar.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/avatar/avatars.html',\n                    controller: 'AvatarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('avatar');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('avatar-detail', {\n            parent: 'entity',\n            url: '/avatar/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'quizApp.avatar.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/avatar/avatar-detail.html',\n                    controller: 'AvatarDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('avatar');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Avatar', function($stateParams, Avatar) {\n                    return Avatar.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'avatar',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('avatar-detail.edit', {\n            parent: 'avatar-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-dialog.html',\n                    controller: 'AvatarDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Avatar', function(Avatar) {\n                            return Avatar.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('avatar.new', {\n            parent: 'avatar',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-dialog.html',\n                    controller: 'AvatarDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                path: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('avatar', null, { reload: 'avatar' });\n                }, function() {\n                    $state.go('avatar');\n                });\n            }]\n        })\n        .state('avatar.edit', {\n            parent: 'avatar',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-dialog.html',\n                    controller: 'AvatarDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Avatar', function(Avatar) {\n                            return Avatar.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('avatar', null, { reload: 'avatar' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('avatar.delete', {\n            parent: 'avatar',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/avatar/avatar-delete-dialog.html',\n                    controller: 'AvatarDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Avatar', function(Avatar) {\n                            return Avatar.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('avatar', null, { reload: 'avatar' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('quizApp')\n        .factory('Avatar', Avatar);\n\n    Avatar.$inject = ['$resource'];\n\n    function Avatar ($resource) {\n        var resourceUrl =  'api/avatars/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AvatarController', AvatarController);\n\n    AvatarController.$inject = ['$scope', '$state', 'Avatar'];\n\n    function AvatarController ($scope, $state, Avatar) {\n        var vm = this;\n\n        vm.avatars = [];\n\n        loadAll();\n\n        function loadAll() {\n            Avatar.query(function(result) {\n                vm.avatars = result;\n                vm.searchQuery = null;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n\n(function(){\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('quizApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'cs': 'Český',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'et': 'Eesti',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sk': 'Slovenský',\n                'sr': 'Srpski',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'vi': 'Tiếng Việt',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'ru'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive(\"fileread\", [function () {\n            return {\n                scope: {\n                    fileread: \"=\"\n                },\n                link: function (scope, element, attributes) {\n                    element.bind(\"change\", function (changeEvent) {\n                        var reader = new FileReader();\n                        reader.onload = function (loadEvent) {\n                            scope.$apply(function () {\n                                scope.fileread = loadEvent.target.result;\n                            });\n                        };\n                        reader.readAsDataURL(changeEvent.target.files[0]);\n                    });\n                }\n            }\n        }]);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('validFile',function(){\n        return {\n            require:'ngModel',\n            link:function(scope,el,attrs,ngModel){\n                //change event is fired when file is selected\n                el.bind('change',function(){\n                    scope.$apply(function(){\n                        ngModel.$setViewValue(el.val());\n                        ngModel.$render();\n                    });\n                });\n            }\n        }\n    });\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('quizApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('quizApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('quizApp.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('quizApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('quizApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            if (response.status === 401) {\n                delete $localStorage.authenticationToken;\n                delete $sessionStorage.authenticationToken;\n                var Principal = $injector.get('Principal');\n                if (Principal.isAuthenticated()) {\n                    var Auth = $injector.get('Auth');\n                    Auth.authorize(true);\n                }\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('authInterceptor', authInterceptor);\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\n\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\n        var service = {\n            request: request\n        };\n\n        return service;\n\n        function request (config) {\n            /*jshint camelcase: false */\n            config.headers = config.headers || {};\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n            if (token) {\n                config.headers.Authorization = 'Bearer ' + token;\n            }\n            return config;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precedence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage', '$translate', 'JhiLanguageService', 'translationHandler', '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage, $translate, JhiLanguageService, translationHandler, $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to preferred language \"ru\"');\n                $cookies.putObject(name, 'ru');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('ru');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('authInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('quizApp')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'userManagement.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n\n            }        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            //hide anonymous user from user management: it's a required user for Spring Security\n            var hiddenUsersSize = 0;\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data.splice(i, 1);\n                    hiddenUsersSize++;\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count') - hiddenUsersSize;\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'metrics.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('metrics');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n            vm.cachesStats = {};\n            angular.forEach(newValue.gauges, function (value, key) {\n                if (key.indexOf('jcache.statistics') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(18),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'logs.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('logs');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'health.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('health');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular.module('quizApp')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'configuration.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('configuration');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'audits.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audits');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SocialRegisterController', SocialRegisterController);\n\n    SocialRegisterController.$inject = ['$filter', '$stateParams'];\n\n    function SocialRegisterController ($filter, $stateParams) {\n        var vm = this;\n\n        vm.success = $stateParams.success;\n        vm.error = !vm.success;\n        vm.provider = $stateParams.provider;\n        vm.providerLabel = $filter('capitalize')(vm.provider);\n        vm.success = $stateParams.success;\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SocialAuthController', SocialAuthController);\n\n    SocialAuthController.$inject = ['$state', '$cookies', 'Auth'];\n\n    function SocialAuthController($state, $cookies, Auth) {\n        var token = $cookies.get('social-authentication');\n\n        Auth.loginWithToken(token, false).then(function () {\n            $cookies.remove('social-authentication');\n            Auth.authorize(true);\n        }, function () {\n            $state.go('social-register', {'success': 'false'});\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('social-register', {\n            parent: 'account',\n            url: '/social-register/:provider?{success:boolean}',\n            data: {\n                authorities: [],\n                pageTitle: 'social.register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/social/social-register.html',\n                    controller: 'SocialRegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('social');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('social-auth', {\n            parent: 'account',\n            url: '/social-auth',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    controller: 'SocialAuthController'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .factory('SocialService', SocialService);\n\n    SocialService.$inject = ['$http', '$cookies'];\n\n    function SocialService ($http, $cookies) {\n        var socialService = {\n            getProviderSetting: getProviderSetting,\n            getProviderURL: getProviderURL,\n            getCSRF: getCSRF\n        };\n\n        return socialService;\n\n        function getProviderSetting (provider) {\n            switch(provider) {\n            case 'google': return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\n            case 'facebook': return 'public_profile,email';\n            case 'twitter': return '';\n                // jhipster-needle-add-social-button\n            default: return 'Provider setting not defined';\n            }\n        }\n\n        function getProviderURL (provider) {\n            return 'signin/' + provider;\n        }\n\n        function getCSRF () {\n            return $cookies.get($http.defaults.xsrfCookieName);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('jhSocial', jhSocial);\n\n    jhSocial.$inject = ['$translatePartialLoader', '$translate', '$filter', 'SocialService'];\n\n    function jhSocial($translatePartialLoader, $translate, $filter, SocialService) {\n        var directive = {\n            restrict: 'E',\n            scope: {\n                provider: '@ngProvider'\n            },\n            templateUrl: 'app/account/social/directive/social.html',\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods */\n\n        function linkFunc(scope) {\n            \n            $translatePartialLoader.addPart('social');\n            $translate.refresh();\n            \n            scope.label = $filter('capitalize')(scope.provider);\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\n            scope.csrf = SocialService.getCSRF();\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('settings');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController (Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.saveElement = saveElement;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function saveElement (files) {\n            return $http({\n                url: '/api/v1/fileUpload',\n                method: 'POST',\n                withCredentials: true,\n                data: files\n            })\n                .success(function (data) {\n                    vm.success = 'OK';\n                })\n        }\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function(current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small data-translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('password');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('quizApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n(function(){angular.module('quizApp').run(['$templateCache', function($templateCache) {$templateCache.put('app/home/home.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><!--<span class=\"hipster img-responsive img-rounded\"></span>--></div><div class=\"col-md-8\"><!--<h1 data-translate=\"home.title\">Welcome, Java Hipster!</h1>--><!--<p class=\"lead\" data-translate=\"home.subtitle\">This is your homepage</p>--><!--<div ng-switch=\"vm.isAuthenticated()\">--><!--<div class=\"alert alert-success\" ng-switch-when=\"true\" data-translate=\"home.logged.message\" translate-values=\"{username: \\'{{vm.account.login}}\\'}\">--><!--You are logged in as user \"{{vm.account.login}}\".--><!--</div>--><!--<div class=\"alert alert-warning\" ng-switch-when=\"false\" data-translate=\"global.messages.info.authenticated\" translate-compile>--><!--If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br/>- Administrator (login=\"admin\" and password=\"admin\") <br/>- User (login=\"user\" and password=\"user\").--><!--</div>--><!--<div class=\"alert alert-warning\" ng-switch-when=\"false\" data-translate=\"global.messages.info.register\" translate-compile>--><!--You don\\'t have an account yet? <a class=\"alert-link\" ui-sref=\"register\">Register a new account</a>--><!--</div>--><!--</div>--><!--<p data-translate=\"home.question\">--><!--If you have any question on JHipster:--><!--</p>--><!--<ul>--><!--<li><a href=\"http://jhipster.github.io/\" target=\"_blank\" data-translate=\"home.link.homepage\">JHipster homepage</a></li>--><!--<li><a href=\"http://stackoverflow.com/tags/jhipster/info\" target=\"_blank\" data-translate=\"home.link.stackoverflow\">JHipster on Stack Overflow</a></li>--><!--<li><a href=\"https://github.com/jhipster/generator-jhipster/issues?state=open\" target=\"_blank\" data-translate=\"home.link.bugtracker\">JHipster bug tracker</a></li>--><!--<li><a href=\"https://gitter.im/jhipster/generator-jhipster\" target=\"_blank\" data-translate=\"home.link.chat\">JHipster public chat room</a></li>--><!--<li><a href=\"https://twitter.com/java_hipster\" target=\"_blank\"  data-translate=\"home.link.follow\">follow @java_hipster on Twitter</a></li>--><!--</ul>--><!--<p>--><!--<span data-translate=\"home.like\">If you like JHipster, don\\'t forget to give us a star on </span>&nbsp;<a href=\"https://github.com/jhipster/generator-jhipster\" target=\"_blank\" data-translate=\"home.github\">Github</a>!--><!--</p>--></div></div></div>');\n$templateCache.put('app/account/activate/activate.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1 data-translate=\"activate.title\">Activation</h1><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"activate.messages.success\" translate-compile><strong>Your user has been activated.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\" data-translate=\"activate.messages.error\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');\n$templateCache.put('app/account/password/password.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2 data-translate=\"password.title\" translate-values=\"{username: \\'{{vm.account.login}}\\'}\">Password for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"password.messages.success\"><strong>Password changed!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\" data-translate=\"password.messages.error\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\" data-translate=\"global.messages.error.dontmatch\">The password and its confirmation do not match!</div><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.changePassword()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\" data-translate=\"global.form.newpassword\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{\\'global.form.newpassword.placeholder\\' | translate}}\" ng-model=\"vm.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\" data-translate=\"global.messages.validate.newpassword.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\" data-translate=\"global.messages.validate.newpassword.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\" data-translate=\"global.messages.validate.newpassword.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\" data-translate=\"global.form.confirmpassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\" data-translate=\"global.messages.validate.confirmpassword.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\" data-translate=\"global.messages.validate.confirmpassword.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\" data-translate=\"global.messages.validate.confirmpassword.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\" data-translate=\"password.form.button\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/register/register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1 data-translate=\"register.title\">Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"register.messages.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\" data-translate=\"register.messages.error.fail\"><strong>Registration failed!</strong> Please try again later.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorUserExists\" data-translate=\"register.messages.error.userexists\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailExists\" data-translate=\"register.messages.error.emailexists\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\" data-translate=\"global.messages.error.dontmatch\">The password and its confirmation do not match!</div></div><div class=\"col-md-4 col-md-offset-2\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.register()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"login\" data-translate=\"global.form.username\">Username</label><input type=\"text\" class=\"form-control\" id=\"login\" name=\"login\" placeholder=\"{{\\'global.form.username.placeholder\\' | translate}}\" ng-model=\"vm.registerAccount.login\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\" required><div ng-show=\"form.login.$dirty && form.login.$invalid\"><p class=\"help-block\" ng-show=\"form.login.$error.required\" data-translate=\"register.messages.validate.login.required\">Your username is required.</p><p class=\"help-block\" ng-show=\"form.login.$error.minlength\" data-translate=\"register.messages.validate.login.minlength\">Your username is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.login.$error.maxlength\" data-translate=\"register.messages.validate.login.maxlength\">Your username cannot be longer than 50 characters.</p><p class=\"help-block\" ng-show=\"form.login.$error.pattern\" data-translate=\"register.messages.validate.login.pattern\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\" data-translate=\"global.form.email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"{{\\'global.form.email.placeholder\\' | translate}}\" ng-model=\"vm.registerAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\" data-translate=\"global.messages.validate.email.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\" data-translate=\"global.messages.validate.email.invalid\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\" data-translate=\"global.messages.validate.email.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\" data-translate=\"global.messages.validate.email.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"password\" data-translate=\"global.form.newpassword\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{\\'global.form.newpassword.placeholder\\' | translate}}\" ng-model=\"vm.registerAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\" data-translate=\"global.messages.validate.newpassword.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\" data-translate=\"global.messages.validate.newpassword.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\" data-translate=\"global.messages.validate.newpassword.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.registerAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\" data-translate=\"global.form.confirmpassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\" data-translate=\"global.messages.validate.confirmpassword.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\" data-translate=\"global.messages.validate.confirmpassword.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\" data-translate=\"global.messages.validate.confirmpassword.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\" data-translate=\"register.form.button\">Register</button></form><p></p><div class=\"alert alert-warning\" data-translate=\"global.messages.info.authenticated\" translate-compile>If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div></div><div class=\"col-md-4\"><br><jh-social ng-provider=\"google\"></jh-social><jh-social ng-provider=\"facebook\"></jh-social><jh-social ng-provider=\"twitter\"></jh-social><!-- jhipster-needle-add-social-button --></div></div></div>');\n$templateCache.put('app/account/settings/settings.html','<div xmlns:th=\"http://www.w3.org/1999/xhtml\"><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u043E\\u0432</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u044B!</strong></div><jhi-alert-error></jhi-alert-error><form name=\"form\" role=\"form\" accept-charset=\"UTF-8\" enctype=\"multipart/form-data\" action=\"/api/v1/parser/upload\" method=\"post\"><div class=\"form-group\"><label class=\"control-label\" for=\"files\">\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0444\\u0430\\u0439\\u043B\\u044B:</label><input class=\"form-control\" name=\"files\" id=\"files\" type=\"file\" multiple=\"multiple\"></div><button type=\"submit\" class=\"btn btn-primary\">\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C</button></form></div></div></div>');\n$templateCache.put('app/account/social/social-register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1 ng-show=\"success\" data-translate=\"social.register.title\" translate-values=\"{ label: vm.providerLabel }\">Registration with</h1><h1 ng-show=\"error\" data-translate=\"social.register.errorTitle\">Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\" data-translate=\"social.register.messages.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\" data-translate=\"social.register.messages.error.fail\"><strong>Registration failed!</strong> Please try again later.</div><jh-social ng-if=\"vm.success\" ng-provider=\"{{ vm.provider }}\"></jh-social><br><div class=\"alert alert-warning\" data-translate=\"global.messages.info.authenticated\">If you want to <a class=\"alert-link\" href=\"#/login\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div></div></div></div>');\n$templateCache.put('app/admin/audits/audits.html','<div><h2 data-translate=\"audits.title\">Audits</h2><div class=\"row\"><div class=\"col-md-5\"><h4 data-translate=\"audits.filter.title\">Filter by date</h4><p class=\"input-group\"><span class=\"input-group-addon\" data-translate=\"audits.filter.from\">from</span> <input type=\"date\" class=\"input-sm form-control\" name=\"start\" ng-model=\"vm.fromDate\" ng-change=\"vm.onChangeDate()\" required> <span class=\"input-group-addon\" data-translate=\"audits.filter.to\">to</span> <input type=\"date\" class=\"input-sm form-control\" name=\"end\" ng-model=\"vm.toDate\" ng-change=\"vm.onChangeDate()\" required></p></div></div><table class=\"table table-condensed table-striped table-bordered table-responsive\"><thead><tr><th ng-click=\"predicate = \\'timestamp\\'; reverse=!reverse\"><span data-translate=\"audits.table.header.date\">Date</span></th><th ng-click=\"predicate = \\'principal\\'; reverse=!reverse\"><span data-translate=\"audits.table.header.principal\">User</span></th><th ng-click=\"predicate = \\'type\\'; reverse=!reverse\"><span data-translate=\"audits.table.header.status\">State</span></th><th ng-click=\"predicate = \\'data.message\\'; reverse=!reverse\"><span data-translate=\"audits.table.header.data\">Extra data</span></th></tr></thead><tr ng-repeat=\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\" ng-hide=\"audit.filtered\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\"audit.data.message\">{{audit.data.message}}</span> <span ng-show=\"audit.data.remoteAddress\"><span data-translate=\"audits.table.data.remoteAddress\">Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\"text-center\"><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.loadPage(vm.page)\"></uib-pagination></div></div>');\n$templateCache.put('app/admin/configuration/configuration.html','<div><h2 data-translate=\"configuration.title\">Configuration</h2><span data-translate=\"configuration.filter\">Filter (by prefix)</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><label ng-hide=\"filteredConfig.length == 0\">Spring configuration</label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filteredConfig.length == 0\"><thead><tr><th ng-click=\"predicate = \\'prefix\\'; reverse=!reverse\" class=\"col-sm-4\"><span data-translate=\"configuration.table.prefix\">Prefix</span></th><th data-translate=\"configuration.table.properties\" class=\"col-sm-8\">Properties</th></tr></thead><tr ng-repeat=\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\"><td><span>{{entry.prefix}}</span></td><td><div class=\"row\" ng-repeat=\"(key, value) in entry.properties\"><div class=\"col-md-4\">{{key}}</div><div class=\"col-md-8\"><span class=\"pull-right label label-default break\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\"(key, value) in vm.allConfiguration\"><label ng-hide=\"filtered.length == 0\"><span>{{key}}</span></label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filtered.length == 0\"><thead><tr><th class=\"col-sm-4\">Property</th><th class=\"col-sm-8\">Value</th></tr></thead><tbody><tr ng-repeat=\"item in filtered = (value | filter:filter)\"><td class=\"break\">{{item.key}}</td><td class=\"break\"><span class=\"pull-right label label-default break\">{{item.val}}</span></td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/docs/docs.html','<iframe src=\"swagger-ui/index.html\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" width=\"100%\" height=\"900\" scrolling=\"auto\" target=\"_top\" title=\"Swagger UI\"></iframe>\\u042D\\u0442\\u043E \\u0432\\u0430\\u0448\\u0430 \\u0434\\u043E\\u043C\\u0430\\u0448\\u043D\\u044F\\u044F \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \\u0412\\u044B \\u0432\\u043E\\u0448\\u043B\\u0438 \\u043A\\u0430\\u043A \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \"admin@a\".');\n$templateCache.put('app/admin/health/health.html','<div><h2 data-translate=\"health.title\">Health Checks</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span data-translate=\"health.refresh.button\">Refresh</span></button></p><table id=\"healthCheck\" class=\"table table-striped\"><thead><tr><th class=\"col-md-7\" data-translate=\"health.table.service\">Service Name</th><th class=\"col-md-2 text-center\" data-translate=\"health.table.status\">Status</th><th class=\"col-md-2 text-center\" data-translate=\"health.details.details\">Details</th></tr></thead><tbody><tr ng-repeat=\"health in vm.healthData\"><td>{{\\'health.indicator.\\' + vm.baseName(health.name) | translate}} {{vm.subSystemName(health.name)}}</td><td class=\"text-center\"><span class=\"label\" ng-class=\"vm.getLabelClass(health.status)\">{{\\'health.status.\\' + health.status | translate}}</span></td><td class=\"text-center\"><a class=\"hand\" ng-click=\"vm.showHealth(health)\" ng-show=\"health.details || health.error\"><i class=\"glyphicon glyphicon-eye-open\"></i></a></td></tr></tbody></table></div>');\n$templateCache.put('app/admin/health/health.modal.html','<div class=\"modal-header\"><button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" ng-click=\"vm.cancel()\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" id=\"showHealthLabel\">{{\\'health.indicator.\\' + vm.baseName(vm.currentHealth.name) | translate}} {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\"modal-body pad\"><div ng-show=\"vm.currentHealth.details\"><h4 data-translate=\"health.details.properties\">Properties</h4><table class=\"table table-striped\"><thead><tr><th class=\"col-md-6 text-left\" data-translate=\"health.details.name\">Name</th><th class=\"col-md-6 text-left\" data-translate=\"health.details.value\">Value</th></tr></thead><tbody><tr ng-repeat=\"(k,v) in vm.currentHealth.details\"><td class=\"col-md-6 text-left\">{{k}}</td><td class=\"col-md-6 text-left\">{{v}}</td></tr></tbody></table></div><div ng-show=\"vm.currentHealth.error\"><h4 data-translate=\"health.details.error\">Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-default pull-left\" type=\"button\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/logs/logs.html','<div class=\"table-responsive\"><h2 data-translate=\"logs.title\">Logs</h2><p data-translate=\"logs.nbloggers\" translate-values=\"{total: \\'{{ vm.loggers.length }}\\'}\">There are {{ vm.loggers.length }} loggers.</p><span data-translate=\"logs.filter\">Filter</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><table class=\"table table-condensed table-striped table-bordered\"><thead><tr title=\"click to order\"><th ng-click=\"predicate = \\'name\\'; reverse=!reverse\"><span data-translate=\"logs.table.name\">Name</span></th><th ng-click=\"predicate = \\'level\\'; reverse=!reverse\"><span data-translate=\"logs.table.level\">Level</span></th></tr></thead><tr ng-repeat=\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\"vm.changeLevel(logger.name, \\'TRACE\\')\" ng-class=\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">TRACE</button> <button ng-click=\"vm.changeLevel(logger.name, \\'DEBUG\\')\" ng-class=\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">DEBUG</button> <button ng-click=\"vm.changeLevel(logger.name, \\'INFO\\')\" ng-class=\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">INFO</button> <button ng-click=\"vm.changeLevel(logger.name, \\'WARN\\')\" ng-class=\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">WARN</button> <button ng-click=\"vm.changeLevel(logger.name, \\'ERROR\\')\" ng-class=\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">ERROR</button></td></tr></table></div>');\n$templateCache.put('app/admin/metrics/metrics.html','<div><h2 data-translate=\"metrics.title\">Application Metrics</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span data-translate=\"metrics.refresh.button\">Refresh</span></button></p><h3 data-translate=\"metrics.jvm.title\">JVM Metrics</h3><div class=\"row\" ng-hide=\"vm.updatingMetrics\"><div class=\"col-md-4\"><b data-translate=\"metrics.jvm.memory.title\">Memory</b><p><span data-translate=\"metrics.jvm.memory.total\">Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span data-translate=\"metrics.jvm.memory.heap\">Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span data-translate=\"metrics.jvm.memory.nonheap\">Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b data-translate=\"metrics.jvm.threads.title\">Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\"hand\" ng-click=\"vm.refreshThreadDumpData()\" data-toggle=\"modal\" data-target=\"#threadDump\"><i class=\"glyphicon glyphicon-eye-open\"></i></a><p><span data-translate=\"metrics.jvm.threads.runnable\">Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span data-translate=\"metrics.jvm.threads.timedwaiting\">Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span data-translate=\"metrics.jvm.threads.waiting\">Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span data-translate=\"metrics.jvm.threads.blocked\">Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b data-translate=\"metrics.jvm.gc.title\">Garbage collections</b><div class=\"row\"><div class=\"col-md-9\" data-translate=\"metrics.jvm.gc.marksweepcount\">Mark Sweep count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\" data-translate=\"metrics.jvm.gc.marksweeptime\">Mark Sweep time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\"row\"><div class=\"col-md-9\" data-translate=\"metrics.jvm.gc.scavengecount\">Scavenge count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\" data-translate=\"metrics.jvm.gc.scavengetime\">Scavenge time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\"well well-lg\" ng-show=\"vm.updatingMetrics\" data-translate=\"metrics.updating\">Updating...</div><h3 data-translate=\"metrics.jvm.http.title\">HTTP requests (events per second)</h3><p><span data-translate=\"metrics.jvm.http.active\">Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span data-translate=\"metrics.jvm.http.total\">Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th data-translate=\"metrics.jvm.http.table.code\">Code</th><th data-translate=\"metrics.jvm.http.table.count\">Count</th><th class=\"text-right\" data-translate=\"metrics.jvm.http.table.mean\">Mean</th><th class=\"text-right\"><span data-translate=\"metrics.jvm.http.table.average\">Average</span> (1 min)</th><th class=\"text-right\"><span data-translate=\"metrics.jvm.http.table.average\">Average</span> (5 min)</th><th class=\"text-right\"><span data-translate=\"metrics.jvm.http.table.average\">Average</span> (15 min)</th></tr></thead><tbody><tr><td data-translate=\"metrics.jvm.http.code.ok\">OK</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td data-translate=\"metrics.jvm.http.code.notfound\">Not Found</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td data-translate=\"metrics.jvm.http.code.servererror\">Server error</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3 data-translate=\"metrics.servicesstats.title\">Services statistics (time in millisecond)</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th data-translate=\"metrics.servicesstats.table.name\">Service name</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.count\">Count</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.mean\">Mean</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.min\">Min</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.p50\">p50</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.p75\">p75</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.p95\">p95</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.p99\">p99</th><th class=\"text-right\" data-translate=\"metrics.servicesstats.table.max\">Max</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.servicesStats\"><td>{{k}}</td><td class=\"text-right\">{{v.count}}</td><td class=\"text-right\">{{v.mean * 1000 | number:0}}</td><td class=\"text-right\">{{v.min * 1000 | number:0}}</td><td class=\"text-right\">{{v.p50 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p75 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p95 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p99 * 1000 | number:0}}</td><td class=\"text-right\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3 data-translate=\"metrics.cache.title\">Cache statistics</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th data-translate=\"metrics.cache.cachename\">Cache name</th><th class=\"text-right\" data-translate=\"metrics.cache.hits\">Cache Hits</th><th class=\"text-right\" data-translate=\"metrics.cache.misses\">Cache Misses</th><th class=\"text-right\" data-translate=\"metrics.cache.gets\">Cache Gets</th><th class=\"text-right\" data-translate=\"metrics.cache.puts\">Cache Puts</th><th class=\"text-right\" data-translate=\"metrics.cache.removals\">Cache Removals</th><th class=\"text-right\" data-translate=\"metrics.cache.evictions\">Cache Evictions</th><th class=\"text-right\" data-translate=\"metrics.cache.hitPercent\">Cache Hit %</th><th class=\"text-right\" data-translate=\"metrics.cache.missPercent\">Cache Miss %</th><th class=\"text-right\" data-translate=\"metrics.cache.averageGetTime\">Average get time (\\xB5s)</th><th class=\"text-right\" data-translate=\"metrics.cache.averagePutTime\">Average put time (\\xB5s)</th><th class=\"text-right\" data-translate=\"metrics.cache.averageRemoveTime\">Average remove time (\\xB5s)</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.cachesStats\" ng-once><td>{{v.name}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hits\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-misses\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-gets\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-puts\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-removals\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-evictions\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hit-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-miss-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-get-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-put-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-remove-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 data-translate=\"metrics.datasource.title\" ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\">DataSource statistics (time in millisecond)</h3><div class=\"table-responsive\" ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\"><table class=\"table table-striped\"><thead><tr><th><span data-translate=\"metrics.datasource.usage\">Usage</span> ({{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value}})</th><th class=\"text-right\" data-translate=\"metrics.datasource.count\">Count</th><th class=\"text-right\" data-translate=\"metrics.datasource.mean\">Mean</th><th class=\"text-right\" data-translate=\"metrics.datasource.min\">Min</th><th class=\"text-right\" data-translate=\"metrics.datasource.p50\">p50</th><th class=\"text-right\" data-translate=\"metrics.datasource.p75\">p75</th><th class=\"text-right\" data-translate=\"metrics.datasource.p95\">p95</th><th class=\"text-right\" data-translate=\"metrics.datasource.p99\">p99</th><th class=\"text-right\" data-translate=\"metrics.datasource.max\">Max</th></tr></thead><tbody><tr><td><div class=\"progress progress-striped\"><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value\" value=\"vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].count}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].mean | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].min | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p50 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p75 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p95 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p99 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/metrics/metrics.modal.html','<!-- Modal used to display the threads dump --><div class=\"modal-header\"><button type=\"button\" class=\"close\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\" data-translate=\"metrics.jvm.threads.dump.title\">Threads dump</h4></div><div class=\"modal-body pad\"><span class=\"label label-primary\" ng-click=\"threadDumpFilter = {}\">All&nbsp;<span class=\"badge\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\"label label-success\" ng-click=\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\">Runnable&nbsp;<span class=\"badge\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\"label label-info\" ng-click=\"threadDumpFilter = {threadState: \\'WAITING\\'}\">Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\"label label-warning\" ng-click=\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\">Timed Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\"label label-danger\" ng-click=\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\">Blocked&nbsp;<span class=\"badge\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\"voffset2\">&nbsp;</div>Filter <input type=\"text\" ng-model=\"threadDumpFilter\" class=\"form-control\"><div class=\"row pad\" ng-repeat=\"(k, v) in vm.threadDump | filter:threadDumpFilter\"><h5><span class=\"label\" ng-class=\"vm.getLabelClass(v.threadState)\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\"show = !show\"><span ng-show=\"!show\" data-translate=\"metrics.jvm.threads.dump.show\">Show StackTrace</span> <span ng-show=\"show\" data-translate=\"metrics.jvm.threads.dump.hide\">Hide StackTrace</span></a></h5><div class=\"well\" ng-show=\"show\"><div ng-repeat=\"(stK, stV) in v.stackTrace\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\"voffset1\"></span></div></div><table class=\"table table-condensed\"><thead><tr><th class=\"text-right\" data-translate=\"metrics.jvm.threads.dump.blockedtime\">Blocked Time</th><th class=\"text-right\" data-translate=\"metrics.jvm.threads.dump.blockedcount\">Blocked Count</th><th class=\"text-right\" data-translate=\"metrics.jvm.threads.dump.waitedtime\">Waited Time</th><th class=\"text-right\" data-translate=\"metrics.jvm.threads.dump.waitedcount\">Waited Count</th><th data-translate=\"metrics.jvm.threads.dump.lockname\">Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/user-management/user-management-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.user.login)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"userManagement.delete.question\" translate-values=\"{login: \\'{{vm.user.login}}\\'}\">Are you sure you want to delete this User?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management-detail.html','<div><h2><span data-translate=\"userManagement.detail.title\">User</span> \"{{vm.user.login}}\"</h2><dl class=\"dl-horizontal\"><dt><span data-translate=\"userManagement.login\">Login</span></dt><dd><span>{{vm.user.login}}</span></dd><dt><span data-translate=\"userManagement.firstName\">First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span data-translate=\"userManagement.lastName\">Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span data-translate=\"userManagement.email\">Email</span></dt><dd>{{vm.user.email}}</dd><dt><span data-translate=\"userManagement.activated\">Activated</span></dt><dd>{{vm.user.activated}}</dd><dt><span data-translate=\"userManagement.langKey\">Lang Key</span></dt><dd>{{vm.user.langKey}}</dd><dt><span data-translate=\"userManagement.createdBy\">Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span data-translate=\"userManagement.createdDate\">Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span data-translate=\"userManagement.lastModifiedBy\">Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span data-translate=\"userManagement.lastModifiedDate\">Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span data-translate=\"userManagement.profiles\">Profiles</span></dt><dd><ul class=\"list-unstyled\"><li ng-repeat=\"authority in vm.user.authorities\"><span>{{authority}}</span></li></ul></dd></dl><button type=\"submit\" ui-sref=\"user-management\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button></div>');\n$templateCache.put('app/admin/user-management/user-management-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myUserLabel\" data-translate=\"userManagement.home.createOrEditLabel\">Create or edit a User</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\"><label data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" name=\"id\" ng-model=\"vm.user.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"userManagement.login\">Login</label><input type=\"text\" class=\"form-control\" name=\"login\" ng-model=\"vm.user.login\" ng-required=\"vm.user.id == null\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\"><div ng-show=\"editForm.login.$invalid\"><p class=\"help-block\" ng-show=\"editForm.login.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.login.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"50\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"userManagement.firstName\">First Name</label><input type=\"text\" class=\"form-control\" name=\"firstName\" ng-model=\"vm.user.firstName\" ng-maxlength=\"50\"><div ng-show=\"editForm.firstName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.firstName.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"50\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label data-translate=\"userManagement.lastName\">Last Name</label><input type=\"text\" class=\"form-control\" name=\"lastName\" ng-model=\"vm.user.lastName\" ng-maxlength=\"50\"><div ng-show=\"editForm.lastName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.lastName.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"50\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"userManagement.email\">Email</label><input type=\"email\" class=\"form-control\" name=\"email\" ng-model=\"vm.user.email\" required ng-maxlength=\"100\"><div ng-show=\"editForm.email.$invalid\"><p class=\"help-block\" ng-show=\"editForm.email.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"100\">This field cannot be longer than 100 characters.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.email\" data-translate=\"global.messages.validate.email.invalid\">Your e-mail is invalid.</p></div></div><div class=\"form-group\"><label for=\"activated\"><input ng-disabled=\"vm.user.id === null\" type=\"checkbox\" id=\"activated\" name=\"activated\" ng-model=\"vm.user.activated\"> <span data-translate=\"userManagement.activated\">Activated</span></label></div><div class=\"form-group\"><label data-translate=\"userManagement.langKey\">Lang Key</label><select class=\"form-control\" name=\"langKey\" ng-model=\"vm.user.langKey\" ng-options=\"language as language for language in vm.languages track by language\"></select></div><div class=\"form-group\"><label data-translate=\"userManagement.profiles\">Profiles</label><select class=\"form-control\" multiple=\"multiple\" name=\"authority\" ng-model=\"vm.user.authorities\" ng-options=\"authority for authority in vm.authorities\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span data-translate=\"entity.action.save\">Save</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management.html','<div><h2 data-translate=\"userManagement.home.title\">Users</h2><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-4\"><button class=\"btn btn-primary\" ui-sref=\"user-management.new\"><span class=\"glyphicon glyphicon-flash\"></span> <span data-translate=\"userManagement.home.createLabel\">Create a new User</span></button></div></div><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span data-translate=\"global.field.id\">ID</span><span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"login\"><span data-translate=\"userManagement.login\">Login</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"email\"><span data-translate=\"userManagement.email\">Email</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th><th jh-sort-by=\"langKey\"><span data-translate=\"userManagement.langKey\">Lang Key</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th><span data-translate=\"userManagement.profiles\">Profiles</span></th><th jh-sort-by=\"createdDate\"><span data-translate=\"userManagement.createdDate\">Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedBy\"><span data-translate=\"userManagement.lastModifiedBy\">Last Modified By</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedDate\"><span data-translate=\"userManagement.lastModifiedDate\">Last Modified Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"user in vm.users track by user.id\"><td><a ui-sref=\"user-management-detail({login:user.login})\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><span class=\"label label-danger\" ng-click=\"vm.setActive(user, true)\" ng-show=\"!user.activated\" data-translate=\"userManagement.deactivated\" style=\"cursor: pointer\">Deactivated</span> <span class=\"label label-success\" ng-click=\"vm.setActive(user, false)\" ng-show=\"user.activated\" data-translate=\"userManagement.activated\" style=\"cursor: pointer\">Activated</span></td><td>{{user.langKey}}</td><td><div ng-repeat=\"authority in user.authorities\"><span class=\"label label-info\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"user-management-detail({login:user.login})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"user-management.edit({login:user.login})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button> <button type=\"submit\" ui-sref=\"user-management.delete({login:user.login})\" class=\"btn btn-danger btn-sm\" ng-disabled=\"vm.currentAccount.login==user.login\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/components/login/login.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\" data-translate=\"login.title\">Sign in</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1 data-translate=\"login.title\">Sign in</h1></div><div class=\"col-md-8 col-md-offset-2\"><div class=\"alert alert-danger\" ng-show=\"vm.authenticationError\" data-translate=\"login.messages.error.authentication\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\"col-md-6\"><form class=\"form\" role=\"form\" ng-submit=\"vm.login($event)\"><div class=\"form-group\"><label for=\"username\" data-translate=\"global.form.username\">Login</label><input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"{{\\'global.form.username.placeholder\\' | translate}}\" ng-model=\"vm.username\"></div><div class=\"form-group\"><label for=\"password\" data-translate=\"login.form.password\">Password</label><input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"{{\\'login.form.password.placeholder\\' | translate}}\" ng-model=\"vm.password\"></div><div class=\"form-group\"><label for=\"rememberMe\"><input type=\"checkbox\" id=\"rememberMe\" ng-model=\"vm.rememberMe\" checked=\"checked\"> <span data-translate=\"login.form.rememberme\">Remember me</span></label></div><button type=\"submit\" class=\"btn btn-primary\" data-translate=\"login.form.button\">Sign in</button></form><p></p><div class=\"alert alert-warning\"><a class=\"alert-link\" href=\"\" ng-click=\"vm.requestResetPassword()\" data-translate=\"login.password.forgot\">Did you forget your password?</a></div><div class=\"alert alert-warning\" data-translate=\"global.messages.info.register\" translate-compile>You don\\'t have an account yet? <a class=\"alert-link\" href=\"\" ng-click=\"vm.register()\">Register a new account</a></div></div><div class=\"col-md-6\"><br><jh-social ng-provider=\"google\"></jh-social><jh-social ng-provider=\"facebook\"></jh-social><jh-social ng-provider=\"twitter\"></jh-social><!-- jhipster-needle-add-social-button --></div></div></div>');\n$templateCache.put('app/entities/avatar/avatar-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.avatar.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"quizApp.avatar.delete.question\" translate-values=\"{id: \\'{{vm.avatar.id}}\\'}\">Are you sure you want to delete this Avatar?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/entities/avatar/avatar-detail.html','<div><h2><span data-translate=\"quizApp.avatar.detail.title\">Avatar</span> {{vm.avatar.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span data-translate=\"quizApp.avatar.path\">Path</span></dt><dd><span>{{vm.avatar.path}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button> <button type=\"button\" ui-sref=\"avatar-detail.edit({id:vm.avatar.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\">Edit</span></button></div>');\n$templateCache.put('app/entities/avatar/avatar-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myAvatarLabel\" data-translate=\"quizApp.avatar.home.createOrEditLabel\">Create or edit a Avatar</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.avatar.id\"><label for=\"id\" data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.avatar.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.avatar.path\" for=\"field_path\">Path</label><input type=\"text\" class=\"form-control\" name=\"path\" id=\"field_path\" ng-model=\"vm.avatar.path\" ng-minlength=\"1\" ng-maxlength=\"512\"><div ng-show=\"editForm.path.$invalid\"><p class=\"help-block\" ng-show=\"editForm.path.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.path.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"512\">This field cannot be longer than 512 characters.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span data-translate=\"entity.action.save\">Save</span></button></div></form>');\n$templateCache.put('app/entities/avatar/avatars.html','<div><h2 data-translate=\"quizApp.avatar.home.title\">Avatars</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"avatar.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span data-translate=\"quizApp.avatar.home.createLabel\">Create new Avatar</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span data-translate=\"global.field.id\">ID</span></th><th><span data-translate=\"quizApp.avatar.path\">Path</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"avatar in vm.avatars track by avatar.id\"><td><a ui-sref=\"avatar-detail({id:avatar.id})\">{{avatar.id}}</a></td><td>{{avatar.path}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"avatar-detail({id:avatar.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"avatar.edit({id:avatar.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button> <button type=\"submit\" ui-sref=\"avatar.delete({id:avatar.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/category/categories.html','<div><h2 data-translate=\"quizApp.category.home.title\">Categories</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"category.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span data-translate=\"quizApp.category.home.createLabel\">Create new Category</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span data-translate=\"global.field.id\">ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span data-translate=\"quizApp.category.name\">Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"category in vm.categories track by category.id\"><td><a ui-sref=\"category-detail({id:category.id})\">{{category.id}}</a></td><td>{{category.name}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"category-detail({id:category.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"category.edit({id:category.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button> <button type=\"submit\" ui-sref=\"category.delete({id:category.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/category/category-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.category.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"quizApp.category.delete.question\" translate-values=\"{id: \\'{{vm.category.id}}\\'}\">Are you sure you want to delete this Category?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/entities/category/category-detail.html','<div><h2><span data-translate=\"quizApp.category.detail.title\">Category</span> {{vm.category.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span data-translate=\"quizApp.category.name\">Name</span></dt><dd><span>{{vm.category.name}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button> <button type=\"button\" ui-sref=\"category-detail.edit({id:vm.category.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\">Edit</span></button></div>');\n$templateCache.put('app/entities/category/category-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myCategoryLabel\" data-translate=\"quizApp.category.home.createOrEditLabel\">Create or edit a Category</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.category.id\"><label for=\"id\" data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.category.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.category.name\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.category.name\" required ng-minlength=\"1\" ng-maxlength=\"64\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"64\">This field cannot be longer than 64 characters.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span data-translate=\"entity.action.save\">Save</span></button></div></form>');\n$templateCache.put('app/entities/help/help-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.help.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"quizApp.help.delete.question\" translate-values=\"{id: \\'{{vm.help.id}}\\'}\">Are you sure you want to delete this Help?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/entities/help/help-detail.html','<div><h2><span data-translate=\"quizApp.help.detail.title\">Help</span> {{vm.help.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span data-translate=\"quizApp.help.title\">Title</span></dt><dd><span>{{vm.help.title}}</span></dd><dt><span data-translate=\"quizApp.help.description\">Description</span></dt><dd><span>{{vm.help.description}}</span></dd><dt><span data-translate=\"quizApp.help.image\">Image</span></dt><dd><span><img src=\"{{vm.help.image}}\" style=\"max-width:100%\"></span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button> <button type=\"button\" ui-sref=\"help-detail.edit({id:vm.help.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\">Edit</span></button></div>');\n$templateCache.put('app/entities/help/help-dialog.html','<form name=\"editForm\" enctype=\"multipart/form-data\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation xmlns=\"http://www.w3.org/1999/html\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myHelpLabel\" data-translate=\"quizApp.help.home.createOrEditLabel\">Create or edit a Help</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.help.id\"><label for=\"id\" data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.help.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.help.title\" for=\"field_title\">Title</label><input type=\"text\" class=\"form-control\" name=\"title\" id=\"field_title\" ng-model=\"vm.help.title\" required ng-minlength=\"1\" ng-maxlength=\"128\"><div ng-show=\"editForm.title.$invalid\"><p class=\"help-block\" ng-show=\"editForm.title.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.title.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.title.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"128\">This field cannot be longer than 128 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.help.description\" for=\"field_description\">\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435</label><textarea style=\"max-width:868px; min-height: 100px\" class=\"form-control\" name=\"description\" id=\"field_description\" ng-model=\"vm.help.description\" required ng-minlength=\"1\" ng-maxlength=\"2560\"></textarea><div ng-show=\"editForm.description.$invalid\"><p class=\"help-block\" ng-show=\"editForm.description.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.description.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.description.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"2560\">This field cannot be longer than 2560 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.help.image\" for=\"field_file\">\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430</label><input type=\"file\" accept=\"image/*\" class=\"form-control\" name=\"file\" id=\"field_file\" fileread=\"vm.tempFile\"> <img src=\"{{vm.tempFile}}\" style=\"padding-top:10px; max-width: 100%\"> <img ng-if=\"vm.help.image && vm.tempFile ==\\'\\'\" src=\"{{vm.help.image}}\" style=\"padding-top:10px; max-width: 100%\"><div ng-show=\"editForm.file.$invalid\"><p class=\"help-block\" ng-show=\"editForm.description.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span data-translate=\"entity.action.save\">Save</span></button></div></form>');\n$templateCache.put('app/entities/help/helps.html','<div><h2 data-translate=\"quizApp.help.home.title\">Helps</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"help.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span data-translate=\"quizApp.help.home.createLabel\">Create new Help</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span data-translate=\"global.field.id\">ID</span></th><th><span data-translate=\"quizApp.help.title\">Title</span></th><th><span data-translate=\"quizApp.help.description\">Description</span></th><th><span data-translate=\"quizApp.help.image\">Image</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"help in vm.helps track by help.id\"><td><a ui-sref=\"help-detail({id:help.id})\">{{help.id}}</a></td><td>{{help.title}}</td><td>{{help.description}}</td><td><img src=\"{{help.image}}\" width=\"200\" height=\"100\"></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"help-detail({id:help.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"help.edit({id:help.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button> <button type=\"submit\" ui-sref=\"help.delete({id:help.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/offer/offer-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.offer.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">\\u041F\\u043E\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u0443\\u0434\\u0430\\u043B\\u0435\\u043D\\u0438\\u044F</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"quizApp.offer.delete.question\" translate-values=\"{id: \\'{{vm.offer.id}}\\'}\">\\u0412\\u044B \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0443\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u044D\\u0442\\u043E \\u043F\\u0440\\u0435\\u0434\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u0435?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C</span></button></div></form>');\n$templateCache.put('app/entities/offer/offer-detail.html','<div><h2><span data-translate=\"quizApp.offer.detail.title\">\\u041F\\u0440\\u0435\\u0434\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u0435 \\u044D\\u0442\\u043D\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0445 \\u0442\\u0440\\u0430\\u0434\\u0438\\u0446\\u0438\\u0439</span></h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>ID</span></dt><dd><span>{{vm.offer.id}}</span></dd><dt><span data-translate=\"quizApp.offer.date\">\\u0414\\u0430\\u0442\\u0430</span></dt><dd><span>{{vm.offer.date | date:\\'medium\\'}}</span></dd><dt><span data-translate=\"quizApp.offer.user\">\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C</span></dt><dd><span><a ui-sref=\"player-detail({id:vm.offer.user.id})\">{{vm.offer.user.login}}</a></span></dd><dt><span data-translate=\"quizApp.offer.text\">\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435</span></dt><dd><span>{{vm.offer.text}}</span></dd><span ng-if=\"vm.offer.withAttaches\"><dt><span data-translate=\"quizApp.offer.attaches\">\\u0412\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u044F</span></dt><dd ng-repeat=\"attach in vm.offer.attaches\"><span><a target=\"_blank\" href=\"{{attach.path}}\"><img src=\"{{attach.path}}\" style=\"max-width:100%\"></a></span><br><br></dd></span></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button></div>');\n$templateCache.put('app/entities/offer/offer-image-dialog.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button></div><div class=\"modal-body\"><a target=\"_blank\" href=\"{{vm.offer.attaches[vm.imageId].path;}}\"><img style=\"width:100%\" class=\"center-block\" src=\"{{vm.offer.attaches[vm.imageId].path;}}\"></a></div>');\n$templateCache.put('app/entities/offer/offers.html','<div><h2 data-translate=\"quizApp.offer.home.title\">\\u041F\\u0440\\u0435\\u0434\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u044F \\u044D\\u0442\\u043D\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0445 \\u0442\\u0440\\u0430\\u0434\\u0438\\u0446\\u0438\\u0439</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span data-translate=\"global.field.id\">ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"date\"><span data-translate=\"quizApp.offer.date\">\\u0414\\u0430\\u0442\\u0430</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"text\"><span data-translate=\"quizApp.offer.text\">\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"offer in vm.offers track by offer.id\"><td style=\"width: 60px\"><a ui-sref=\"offer-detail({id:offer.id})\">{{offer.id}}</a></td><td style=\"width: 140px\">{{offer.date | date:\\'medium\\'}}</td><td style=\"width:60%\">{{offer.text.length > 100 ? offer.text.substring(0,100)+\\'...\\': offer.text}}</td><td><span ng-if=\"offer.withAttaches\" class=\"glyphicon glyphicon-file\"></span></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"offer-detail({id:offer.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"offer.delete({id:offer.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/player/player-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.player.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"quizApp.player.delete.question\" translate-values=\"{id: \\'{{vm.player.id}}\\'}\">Are you sure you want to delete this Player?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/entities/player/player-detail.html','<div><h2><span data-translate=\"quizApp.player.detail.title\">Player</span> {{vm.player.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span data-translate=\"quizApp.player.name\">Name</span></dt><dd><span>{{vm.player.name}}</span></dd><dt><span data-translate=\"quizApp.player.score\">Score</span></dt><dd><span>{{vm.player.score}}</span></dd><dt><span data-translate=\"quizApp.player.avatar\">Avatar</span></dt><dd><a ui-sref=\"avatar-detail({id:vm.player.avatar.id})\">{{vm.player.avatar.path}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button> <button type=\"button\" ui-sref=\"player-detail.edit({id:vm.player.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\">Edit</span></button></div>');\n$templateCache.put('app/entities/player/player-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myPlayerLabel\" data-translate=\"quizApp.player.home.createOrEditLabel\">Create or edit a Player</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.player.id\"><label for=\"id\" data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.player.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.player.name\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.player.name\" ng-minlength=\"1\" ng-maxlength=\"64\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"64\">This field cannot be longer than 64 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.player.score\" for=\"field_score\">Score</label><input type=\"number\" class=\"form-control\" name=\"score\" id=\"field_score\" ng-model=\"vm.player.score\"></div><div class=\"form-group\"><label data-translate=\"quizApp.player.avatar\" for=\"field_avatar\">Avatar</label><select class=\"form-control\" id=\"field_avatar\" name=\"avatar\" ng-model=\"vm.player.avatar\" ng-options=\"avatar as avatar.path for avatar in vm.avatars track by avatar.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span data-translate=\"entity.action.save\">Save</span></button></div></form>');\n$templateCache.put('app/entities/player/players.html','<div><h2 data-translate=\"quizApp.player.home.title\">Players</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"player.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span data-translate=\"quizApp.player.home.createLabel\">Create new Player</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span data-translate=\"global.field.id\">ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span data-translate=\"quizApp.player.name\">Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"score\"><span data-translate=\"quizApp.player.score\">Score</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"avatar.path\"><span data-translate=\"quizApp.player.avatar\">Avatar</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"player in vm.players track by player.id\"><td><a ui-sref=\"player-detail({id:player.id})\">{{player.id}}</a></td><td>{{player.name}}</td><td>{{player.score}}</td><td><a ui-sref=\"avatar-detail({id:player.avatar.id})\">{{player.avatar.path}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"player-detail({id:player.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"player.edit({id:player.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button> <button type=\"submit\" ui-sref=\"player.delete({id:player.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/question/question-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.question.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">\\u041F\\u043E\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u0443\\u0434\\u0430\\u043B\\u0435\\u043D\\u0438\\u044F</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"quizApp.question.delete.question\" translate-values=\"{id: \\'{{vm.question.id}}\\'}\">\\u0412\\u044B \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0443\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u044D\\u0442\\u043E\\u0442 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C</span></button></div></form>');\n$templateCache.put('app/entities/question/question-detail.html','<div><h2><span data-translate=\"quizApp.question.detail.title\">\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441</span> {{vm.question.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span data-translate=\"quizApp.question.title\">Title</span></dt><dd><span>{{vm.question.title}}</span></dd><dt ng-if=\"vm.question.media.media\"><span data-translate=\"quizApp.question.media\">\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430</span></dt><dd ng-if=\"vm.question.media.media\"><img src=\"{{vm.question.media.media}}\" style=\"max-width:100%\"></dd><dt style=\"{{(vm.question.rightAnswer === 1) ? \\'color:green;\\' : \\'color:darkred\\'}}\"><span data-translate=\"quizApp.question.answer1\">\\u041E\\u0442\\u0432\\u0435\\u0442 1</span></dt><dd style=\"{{(vm.question.rightAnswer === 1) ? \\'color:green\\' :  \\'color:darkred\\'}}\"><span>{{vm.question.answer1}}</span></dd><dt style=\"{{(vm.question.rightAnswer === 2) ? \\'color:green;\\' : \\'color:darkred\\'}}\"><span data-translate=\"quizApp.question.answer2\">\\u041E\\u0442\\u0432\\u0435\\u0442 2</span></dt><dd style=\"{{(vm.question.rightAnswer === 2) ? \\'color:green;\\' : \\'color:darkred\\'}}\"><span>{{vm.question.answer2}}</span></dd><dt style=\"{{(vm.question.rightAnswer === 3) ? \\'color:green;\\' : \\'color:darkred\\'}}\"><span data-translate=\"quizApp.question.answer3\">\\u041E\\u0442\\u0432\\u0435\\u0442 3</span></dt><dd style=\"{{(vm.question.rightAnswer === 3) ? \\'color:green;\\' : \\'color:darkred\\'}}\"><span>{{vm.question.answer3}}</span></dd><dt style=\"{{(vm.question.rightAnswer === 4) ? \\'color:green;\\' : \\'color:darkred\\'}}\"><span data-translate=\"quizApp.question.answer4\">\\u041E\\u0442\\u0432\\u0435\\u0442 4</span></dt><dd style=\"{{(vm.question.rightAnswer === 4) ? \\'color:green;\\' : \\'color:darkred\\'}}\"><span>{{vm.question.answer4}}</span></dd><dt><span data-translate=\"quizApp.question.category\">\\u0412\\u0435\\u0442\\u0432\\u044C</span></dt><dd><a ui-sref=\"category-detail({id:vm.question.category.id})\">{{vm.question.subcategory.name}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button> <button type=\"button\" ui-sref=\"question-detail.edit({id:vm.question.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\">Edit</span></button></div>');\n$templateCache.put('app/entities/question/question-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myQuestionLabel\" data-translate=\"quizApp.question.home.createOrEditLabel\">Create or edit a Question</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.question.id\"><label for=\"id\" data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.question.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.question.title\" for=\"field_title\">\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441</label><input type=\"text\" class=\"form-control\" name=\"title\" id=\"field_title\" ng-model=\"vm.question.title\" required ng-minlength=\"1\" ng-maxlength=\"512\"><div ng-show=\"editForm.title.$invalid\"><p class=\"help-block\" ng-show=\"editForm.title.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.title.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.title.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"512\">This field cannot be longer than 512 characters.</p></div></div><!--<div class=\"form-group\">--><!--<label class=\"control-label\" data-translate=\"quizApp.question.media\" for=\"field_media\">\\u0414\\u0430\\u043D\\u043D\\u044B\\u0435</label>--><!--<input type=\"text\" class=\"form-control\" name=\"media\" id=\"field_media\"--><!--ng-model=\"vm.question.media\"--><!--ng-minlength=\"0\" ng-maxlength=\"512\" />--><!--<div ng-show=\"editForm.media.$invalid\">--><!--<p class=\"help-block\"--><!--ng-show=\"editForm.media.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"0\">--><!--This field is required to be at least 0 characters.--><!--</p>--><!--<p class=\"help-block\"--><!--ng-show=\"editForm.media.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"512\">--><!--This field cannot be longer than 512 characters.--><!--</p>--><!--</div>--><!--</div>--><div class=\"form-group\"><label class=\"control-label\"><input type=\"radio\" ng-model=\"vm.question.rightAnswer\" value=\"1\"> \\u041E\\u0442\\u0432\\u0435\\u0442 1</label><input type=\"text\" class=\"form-control\" name=\"answer1\" id=\"field_answer1\" ng-model=\"vm.question.answer1\" required ng-minlength=\"1\" ng-maxlength=\"64\"><div ng-show=\"editForm.answer1.$invalid\"><p class=\"help-block\" ng-show=\"editForm.answer1.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.answer1.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.answer1.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"64\">This field cannot be longer than 64 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\"><input type=\"radio\" ng-model=\"vm.question.rightAnswer\" value=\"2\"> \\u041E\\u0442\\u0432\\u0435\\u0442 2</label><input type=\"text\" class=\"form-control\" name=\"answer2\" id=\"field_answer2\" ng-model=\"vm.question.answer2\" required ng-minlength=\"1\" ng-maxlength=\"64\"><div ng-show=\"editForm.answer2.$invalid\"><p class=\"help-block\" ng-show=\"editForm.answer2.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.answer2.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.answer2.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"64\">This field cannot be longer than 64 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\"><input type=\"radio\" ng-model=\"vm.question.rightAnswer\" value=\"3\"> \\u041E\\u0442\\u0432\\u0435\\u0442 3</label><input type=\"text\" class=\"form-control\" name=\"answer3\" id=\"field_answer3\" ng-model=\"vm.question.answer3\" required ng-minlength=\"1\" ng-maxlength=\"64\"><div ng-show=\"editForm.answer3.$invalid\"><p class=\"help-block\" ng-show=\"editForm.answer3.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.answer3.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.answer3.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"64\">This field cannot be longer than 64 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\"><input type=\"radio\" ng-model=\"vm.question.rightAnswer\" value=\"4\"> \\u041E\\u0442\\u0432\\u0435\\u0442 4</label><input type=\"text\" class=\"form-control\" name=\"answer4\" id=\"field_answer4\" ng-model=\"vm.question.answer4\" required ng-minlength=\"1\" ng-maxlength=\"64\"><div ng-show=\"editForm.answer4.$invalid\"><p class=\"help-block\" ng-show=\"editForm.answer4.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.answer4.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.answer4.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"64\">This field cannot be longer than 64 characters.</p></div></div><!--<div class=\"form-group\">--><!--<label class=\"control-label\" data-translate=\"quizApp.question.rightAnswer\" for=\"field_rightAnswer\">\\u041F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439--><!--\\u043E\\u0442\\u0432\\u0435\\u0442</label>--><!--<input type=\"number\" class=\"form-control\" name=\"rightAnswer\" id=\"field_rightAnswer\"--><!--ng-model=\"vm.question.rightAnswer\"--><!--required/>--><!--<div ng-show=\"editForm.rightAnswer.$invalid\">--><!--<p class=\"help-block\"--><!--ng-show=\"editForm.rightAnswer.$error.required\" data-translate=\"entity.validation.required\">--><!--This field is required.--><!--</p>--><!--<p class=\"help-block\"--><!--ng-show=\"editForm.rightAnswer.$error.number\" data-translate=\"entity.validation.number\">--><!--This field should be a number.--><!--</p>--><!--</div>--><!--</div>--><div class=\"form-group\"><label data-translate=\"quizApp.question.category\" for=\"field_category\">\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F</label><select class=\"form-control\" id=\"field_category\" name=\"category\" ng-model=\"vm.cat\" ng-options=\"category as category.name for category in vm.categories track by category.id\" required><option value=\"\"></option></select></div><div ng-show=\"editForm.category.$invalid\"><p class=\"help-block\" ng-show=\"editForm.category.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p></div><div class=\"form-group\"><label data-translate=\"quizApp.question.category\" for=\"field_subcategory\">\\u0412\\u0435\\u0442\\u0432\\u044C</label><select class=\"form-control\" id=\"field_subcategory\" name=\"subcategory\" ng-options=\"subcategory as subcategory.name for subcategory in vm.cat.subcategories track by subcategory.id\" required><option value=\"\"></option></select></div><div ng-show=\"editForm.subcategory.$invalid\"><p class=\"help-block\" ng-show=\"editForm.subcategory.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p></div></div></form>');\n$templateCache.put('app/entities/question/questions.html','<div><h2 data-translate=\"quizApp.question.home.title\">\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B</h2><jhi-alert></jhi-alert><jhi-alert-error></jhi-alert-error><style type=\"text/css\">.btn-upload {\\n            position: relative;\\n            overflow: hidden;\\n        }\\n\\n        .btn-upload input {\\n            position: absolute;\\n            top: 0;\\n            right: 0;\\n            margin: 0;\\n            opacity: 0;\\n            filter: alpha(opacity=0);\\n            transform: translate(-300px, 0) scale(4);\\n            -webkit-transform: translate(-300px, 0) scale(4);\\n            -ms-transform: translate(-300px, 0) scale(4);\\n            -o-transform: translate(-300px, 0) scale(4);\\n            font-size: 23px;\\n            direction: ltr;\\n            cursor: pointer;\\n        }\\n\\n        * html .btn-upload {\\n            line-height: 24px;\\n            margin: 1px -3px 0 0;\\n        }\\n\\n        * + html .btn-upload {\\n            padding: 2px 15px;\\n            margin: 1px 0 0 0;\\n        }\\n\\n        .show-image div {\\n            visibility: hidden;\\n            position: absolute;\\n            background: #fff;\\n            box-shadow: -2px 2px 10px -1px #111;\\n            border-radius: 2px;\\n            z-index: 5;\\n        }\\n\\n        .show-image a {\\n            color: black;\\n        }\\n\\n        .show-image span {\\n            color: black;\\n        }\\n\\n        .show-image:link div {\\n            color: inherit;\\n        }\\n\\n        .show-image:visited {\\n            color: inherit;\\n        }\\n\\n        .show-image:active div {\\n            color: inherit;\\n        }\\n\\n        .show-image:hover div {\\n            color: inherit;\\n            visibility: visible;\\n        }</style><div class=\"container-fluid\"><div class=\"row\"><div class=\"no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"question.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span data-translate=\"quizApp.question.home.createLabel\">\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441</span></button><div style=\"float: right\"><upload-button class=\"btn btn-primary btn-upload\" url=\"/api/v1/parser/upload\" data=\"files\" param=\"files\" multiple=\"true\">\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u043E\\u0432</upload-button></div></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span data-translate=\"global.field.id\">ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th><div class=\"glyphicon glyphicon-picture\"></div></th><th jh-sort-by=\"title\"><span data-translate=\"quizApp.question.title\">\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441</span> <span class=\"glyphicon glyphicon-sort\"></span></th><!--<th jh-sort-by=\"answer1\"><span data-translate=\"quizApp.question.answer1\">\\u041E\\u0442\\u0432\\u0435\\u0442 1</span> <span--><!--class=\"glyphicon glyphicon-sort\"></span></th>--><!--<th jh-sort-by=\"answer2\"><span data-translate=\"quizApp.question.answer2\">\\u041E\\u0442\\u0432\\u0435\\u0442 2</span> <span--><!--class=\"glyphicon glyphicon-sort\"></span></th>--><!--<th jh-sort-by=\"answer3\"><span data-translate=\"quizApp.question.answer3\">\\u041E\\u0442\\u0432\\u0435\\u0442 3</span> <span--><!--class=\"glyphicon glyphicon-sort\"></span></th>--><!--<th jh-sort-by=\"answer4\"><span data-translate=\"quizApp.question.answer4\">\\u041E\\u0442\\u0432\\u0435\\u0442 4</span> <span--><!--class=\"glyphicon glyphicon-sort\"></span></th>--><!--<th jh-sort-by=\"rightAnswer\"><span--><!--data-translate=\"quizApp.question.rightAnswer\">\\u041F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439 \\u043E\\u0442\\u0432\\u0435\\u0442</span> <span--><!--class=\"glyphicon glyphicon-sort\"></span></th>--><th jh-sort-by=\"subcategory.name\"><span data-translate=\"quizApp.question.category\">\\u0412\\u0435\\u0442\\u0432\\u044C</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr style=\"width: 100%\" ng-repeat=\"question in vm.questions track by question.id\"><td style=\"min-width: 55px\"><a ui-sref=\"question-detail({id:question.id})\">{{question.id}}</a></td><td><a ng-if=\"question.media.media\" class=\"show-image\"><span class=\"glyphicon glyphicon-picture\"></span><div><img height=\"400\" width=\"680\" src=\"{{question.media.media}}\"></div></a></td><td style=\"width: 60%\">{{question.title}}</td><!--<td>{{question.answer1}}</td>--><!--<td>{{question.answer2}}</td>--><!--<td>{{question.answer3}}</td>--><!--<td>{{question.answer4}}</td>--><!--<td>{{question.rightAnswer}}</td>--><td><a>{{question.subcategory.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"question-detail({id:question.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"question.edit({id:question.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button> <button type=\"submit\" ui-sref=\"question.delete({id:question.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/subcategory/subcategories.html','<div><h2 data-translate=\"quizApp.subcategory.home.title\">Subcategories</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"subcategory.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span data-translate=\"quizApp.subcategory.home.createLabel\">Create new Subcategory</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span data-translate=\"global.field.id\">ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span data-translate=\"quizApp.subcategory.name\">Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"category.name\"><span data-translate=\"quizApp.subcategory.category\">Category</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"subcategory in vm.subcategories track by subcategory.id\"><td><a ui-sref=\"subcategory-detail({id:subcategory.id})\">{{subcategory.id}}</a></td><td>{{subcategory.name}}</td><td><a ui-sref=\"category-detail({id:subcategory.category.id})\">{{subcategory.category.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"subcategory-detail({id:subcategory.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.view\"></span></button> <button type=\"submit\" ui-sref=\"subcategory.edit({id:subcategory.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\"></span></button> <button type=\"submit\" ui-sref=\"subcategory.delete({id:subcategory.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.delete\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/subcategory/subcategory-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.subcategory.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" data-translate=\"entity.delete.title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p data-translate=\"quizApp.subcategory.delete.question\" translate-values=\"{id: \\'{{vm.subcategory.id}}\\'}\">Are you sure you want to delete this Subcategory?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span data-translate=\"entity.action.delete\">Delete</span></button></div></form>');\n$templateCache.put('app/entities/subcategory/subcategory-detail.html','<div><h2><span data-translate=\"quizApp.subcategory.detail.title\">Subcategory</span> {{vm.subcategory.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span data-translate=\"quizApp.subcategory.name\">Name</span></dt><dd><span>{{vm.subcategory.name}}</span></dd><dt><span data-translate=\"quizApp.subcategory.category\">Category</span></dt><dd><a ui-sref=\"category-detail({id:vm.subcategory.category.id})\">{{vm.subcategory.category.name}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span data-translate=\"entity.action.back\"> Back</span></button> <button type=\"button\" ui-sref=\"subcategory-detail.edit({id:vm.subcategory.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\" data-translate=\"entity.action.edit\">Edit</span></button></div>');\n$templateCache.put('app/entities/subcategory/subcategory-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"mySubcategoryLabel\" data-translate=\"quizApp.subcategory.home.createOrEditLabel\">Create or edit a Subcategory</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.subcategory.id\"><label for=\"id\" data-translate=\"global.field.id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.subcategory.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" data-translate=\"quizApp.subcategory.name\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.subcategory.name\" required ng-minlength=\"1\" ng-maxlength=\"64\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" data-translate=\"entity.validation.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\" data-translate=\"entity.validation.maxlength\" translate-value-max=\"64\">This field cannot be longer than 64 characters.</p></div></div><div class=\"form-group\"><label data-translate=\"quizApp.subcategory.category\" for=\"field_category\">Category</label><select class=\"form-control\" id=\"field_category\" name=\"category\" ng-model=\"vm.subcategory.category\" ng-options=\"category as category.name for category in vm.categories track by category.id\" required><option value=\"\"></option></select></div><div ng-show=\"editForm.category.$invalid\"><p class=\"help-block\" ng-show=\"editForm.category.$error.required\" data-translate=\"entity.validation.required\">This field is required.</p></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span data-translate=\"entity.action.cancel\">Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span data-translate=\"entity.action.save\">Save</span></button></div></form>');\n$templateCache.put('app/layouts/error/accessdenied.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1 data-translate=\"error.title\">Error Page!</h1><div class=\"alert alert-danger\" data-translate=\"error.403\">You are not authorized to access the page.</div></div></div></div>');\n$templateCache.put('app/layouts/error/error.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1 data-translate=\"error.title\">Error Page!</h1><div ng-show=\"errorMessage\"><div class=\"alert alert-danger\">{{errorMessage}}</div></div></div></div></div>');\n$templateCache.put('app/layouts/navbar/navbar.html','<nav class=\"navbar navbar-default\" role=\"navigation\"><div class=\"container\"><div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle\" ng-click=\"vm.toggleNavbar()\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button> <a class=\"navbar-brand logo\" href=\"#/\" ng-click=\"vm.collapseNavbar()\"><img class=\"logo-img\" src=\"content/images/logo.png\" alt=\"logo\"> <span>\\u0412\\u0438\\u043A\\u0442\\u043E\\u0440\\u0438\\u043D\\u0430 \\u043D\\u0430\\u0440\\u043E\\u0434\\u044B \\u0420\\u043E\\u0441\\u0441\\u0438\\u0438</span></a></div><div class=\"navbar-collapse\" uib-collapse=\"vm.isNavbarCollapsed\" ng-switch=\"vm.isAuthenticated()\"><ul class=\"nav navbar-nav navbar-right\"><li ui-sref-active=\"active\"><a ui-sref=\"home\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-home\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.home\">Home</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\"{active: vm.$state.includes(\\'entity\\')}\" ng-switch-when=\"true\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"entity-menu\"><span><span class=\"glyphicon glyphicon-th-list\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.entities.main\">Entities </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"offer\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span data-translate=\"global.menu.entities.offer\">Offer</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"avatar\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span data-translate=\"global.menu.entities.avatar\">Avatar</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"player\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span data-translate=\"global.menu.entities.player\">Player</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"help\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span data-translate=\"global.menu.entities.help\">Help</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"category\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span data-translate=\"global.menu.entities.category\">Category</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"question\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span data-translate=\"global.menu.entities.question\">Question</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"subcategory\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span data-translate=\"global.menu.entities.subcategory\">Subcategory</span></a></li><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li><li ng-class=\"{active: vm.$state.includes(\\'account\\')}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"account-menu\"><span><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.account.main\">Account </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"settings\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-wrench\"></span>&nbsp; <span data-translate=\"global.menu.account.settings\">Settings</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"password\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span>&nbsp; <span data-translate=\"global.menu.account.password\">Password</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a href=\"\" ng-click=\"vm.logout()\" id=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp; <span data-translate=\"global.menu.account.logout\">Sign out</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a href=\"\" ng-click=\"vm.login()\" id=\"login\"><span class=\"glyphicon glyphicon-log-in\"></span>&nbsp; <span data-translate=\"global.menu.account.login\">Sign in</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a ui-sref=\"register\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-plus-sign\"></span>&nbsp; <span data-translate=\"global.menu.account.register\">Register</span></a></li></ul></li><li ng-class=\"{active: vm.$state.includes(\\'admin\\')}\" ng-switch-when=\"true\" has-authority=\"ROLE_ADMIN\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"admin-menu\"><span><span class=\"glyphicon glyphicon-tower\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.admin.main\">Administration</span> <b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"user-management\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-user\"></span>&nbsp; <span data-translate=\"global.menu.admin.userManagement\">User management</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-metrics\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-dashboard\"></span>&nbsp; <span data-translate=\"global.menu.admin.metrics\">Metrics</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-health\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-heart\"></span>&nbsp; <span data-translate=\"global.menu.admin.health\">Health</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-configuration\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-list-alt\"></span>&nbsp; <span data-translate=\"global.menu.admin.configuration\">Configuration</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"audits\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-bell\"></span>&nbsp; <span data-translate=\"global.menu.admin.audits\">Audits</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"logs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-tasks\"></span>&nbsp; <span data-translate=\"global.menu.admin.logs\">Logs</span></a></li><li ng-show=\"vm.swaggerEnabled\" ui-sref-active=\"active\"><a ui-sref=\"docs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-book\"></span>&nbsp; <span data-translate=\"global.menu.admin.apidocs\">API</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --></ul></li><li ui-sref-active=\"active\" uib-dropdown class=\"dropdown pointer\" ng-controller=\"JhiLanguageController as languageVm\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" ng-if=\"languageVm.languages.length > 1\"><span><span class=\"glyphicon glyphicon-flag\"></span> <span class=\"hidden-sm\" data-translate=\"global.menu.language\">Language</span> <b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu ng-if=\"languageVm.languages.length > 1\"><li active-menu=\"{{language}}\" ng-repeat=\"language in languageVm.languages\"><a href=\"\" ng-click=\"languageVm.changeLanguage(language);vm.collapseNavbar();\">{{language | findLanguageFromKey}}</a></li></ul></li></ul></div></div></nav>');\n$templateCache.put('app/account/reset/finish/reset.finish.html','<div><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1 data-translate=\"reset.finish.title\">Reset password</h1><div class=\"alert alert-danger\" data-translate=\"reset.finish.messages.keymissing\" ng-show=\"vm.keyMissing\"><strong>The password reset key is missing.</strong></div><div class=\"alert alert-warning\" ng-hide=\"vm.success || vm.keyMissing\"><p data-translate=\"reset.finish.messages.info\">Choose a new password</p></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><p data-translate=\"reset.finish.messages.error\">Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success\"><p data-translate=\"reset.finish.messages.success\" translate-compile><strong>Your password has been reset.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</p></div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\" data-translate=\"global.messages.error.dontmatch\">The password and its confirmation do not match!</div><div ng-hide=\"vm.keyMissing\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.finishReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\" data-translate=\"global.form.newpassword\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{\\'global.form.newpassword.placeholder\\' | translate}}\" ng-model=\"vm.resetAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\" data-translate=\"global.messages.validate.newpassword.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\" data-translate=\"global.messages.validate.newpassword.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\" data-translate=\"global.messages.validate.newpassword.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.resetAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\" data-translate=\"global.form.confirmpassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\" data-translate=\"global.messages.validate.confirmpassword.required\">Your password confirmation is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\" data-translate=\"global.messages.validate.confirmpassword.minlength\">Your password confirmation is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\" data-translate=\"global.messages.validate.confirmpassword.maxlength\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\" data-translate=\"reset.finish.form.button\">Reset Password</button></form></div></div></div></div>');\n$templateCache.put('app/account/reset/request/reset.request.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1 data-translate=\"reset.request.title\">Reset your password</h1><div class=\"alert alert-danger\" data-translate=\"reset.request.messages.notfound\" ng-show=\"vm.errorEmailNotExists\"><strong>E-Mail address isn\\'t registered!</strong> Please check and try again.</div><div class=\"alert alert-warning\" ng-hide=\"vm.success\"><p data-translate=\"reset.request.messages.info\">Enter the e-mail address you used to register.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success == \\'OK\\'\"><p data-translate=\"reset.request.messages.success\">Check your e-mails for details on how to reset your password.</p></div><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.requestReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"email\" data-translate=\"global.form.email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"{{\\'global.form.email.placeholder\\' | translate}}\" ng-model=\"vm.resetAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\" data-translate=\"global.messages.validate.email.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\" data-translate=\"global.messages.validate.email.invalid\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\" data-translate=\"global.messages.validate.email.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\" data-translate=\"global.messages.validate.email.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\" data-translate=\"reset.request.form.button\">Reset</button></form></div></div></div>');\n$templateCache.put('app/account/social/directive/social.html','<form action=\"{{ providerURL }}\" method=\"POST\"><button type=\"submit\" class=\"btn btn-block jh-btn-social jh-btn-{{ provider }}\"><span data-translate=\"social.btnLabel\" translate-values=\"{ label: label }\">Sign in with {{ label }}</span></button> <input name=\"scope\" type=\"hidden\" value=\"{{\\xA0providerSetting }}\"> <input name=\"_csrf\" type=\"hidden\" value=\"{{\\xA0csrf }}\"></form>');}]);})();"
    ],
    "sourceRoot": "/source/"
}
